using AMSTrackingService.Models;
using Microsoft.Exchange.WebServices.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace AMSTrackingService.Controllers
{
    public class EmailTrackingController : ApiController
    {
        [HttpGet]
        public bool AutoGeneratedEmailTracking(string AutoGeneratedEmailId, string CallCenterMailType, string IsClosed)
        {
            try
            {
                ExchangeService service = new ExchangeService();
                service.UseDefaultCredentials = false;
                FolderId SharedMailbox;
                using (PhNetworkEntities DbContext = new PhNetworkEntities())
                {
                    if (Convert.ToInt32(CallCenterMailType) == 1)
                    {
                        string GeneralUserName = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "GeneralEmailUserName").FirstOrDefault().ConfigurationValue;
                        string GeneralPassword = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "GeneralEmailPassword").FirstOrDefault().ConfigurationValue;
                        string GeneralDomain = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "GeneralEmailDomain").FirstOrDefault().ConfigurationValue;
                        string GeneralAutodiscoverUrl = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "GeneralAutoDiscoverUrl").FirstOrDefault().ConfigurationValue;
                        string GeneralEmail = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "GeneralCallCenterEmail").FirstOrDefault().ConfigurationValue;
                        service.AutodiscoverUrl(GeneralAutodiscoverUrl);
                        service.Credentials = new WebCredentials(GeneralUserName, GeneralPassword, GeneralDomain);
                        SharedMailbox = new FolderId(WellKnownFolderName.Inbox, GeneralEmail);
                    }
                    else
                    {
                        string SPUserName = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "SPEmailUserName").FirstOrDefault().ConfigurationValue;
                        string SPPassword = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "SPEmailPassword").FirstOrDefault().ConfigurationValue;
                        string SPDomain = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "SPEmailDomain").FirstOrDefault().ConfigurationValue;
                        string SPAutodiscoverUrl = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "SPAutoDiscoverUrl").FirstOrDefault().ConfigurationValue;
                        string SPEmail = DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "SPCallCenterEmail").FirstOrDefault().ConfigurationValue;
                        service.AutodiscoverUrl(SPAutodiscoverUrl);
                        service.Credentials = new WebCredentials(SPUserName, SPPassword, SPDomain);
                        SharedMailbox = new FolderId(WellKnownFolderName.Inbox, SPEmail);
                    }
                    ItemView itemView = new ItemView(Convert.ToInt32(DbContext.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "SPCallCenterEmail").FirstOrDefault().ConfigurationValue));
                    var Email = service.FindItems(SharedMailbox, itemView).Where(p => p.Id.UniqueId == AutoGeneratedEmailId).FirstOrDefault();
                    EmailMessage message = EmailMessage.Bind(service, (EmailMessage.Bind(service, Email.Id)).Id, new PropertySet(BasePropertySet.FirstClassProperties, new ExtendedPropertyDefinition(0x1013, MapiPropertyType.Binary)));
                    if (IsClosed=="true")
                    {
                        message.Flag.FlagStatus = ItemFlagStatus.Complete;
                        message.Flag.CompleteDate = DateTime.Now;
                        message.Update(ConflictResolutionMode.AlwaysOverwrite);
                    }
                    else
                    {
                        message.IsRead = true;
                        message.Flag.FlagStatus = ItemFlagStatus.Flagged;
                        message.Flag.StartDate = DateTime.Now;
                        message.Flag.DueDate = DateTime.Now;
                        message.Update(ConflictResolutionMode.AlwaysOverwrite);
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
    }
}
