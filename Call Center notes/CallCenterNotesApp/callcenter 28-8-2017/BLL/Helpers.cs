using CallCenterNotesApp.CustomExceptions;
using CallCenterNotesApp.DLL;
using CallCenterNotesApp.ModelView;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net.NetworkInformation;
using System.Web;
using static CallCenterNotesApp.Enums.Enums;
using System.Data.SqlClient;
using ClosedXML.Excel;
using System.Configuration;
using System.Transactions;
using System.Data.Entity.Migrations;
using CallCenterNotesApp.Reports;

namespace CallCenterNotesApp.BLL
{
    public class Helpers
    {
        protected Mailing SendEmail;
        protected CallcentereMailRequest Model;
        public Helpers()
        {
            SendEmail = new Mailing();
            Model = new CallcentereMailRequest();
        }
        public List<ModelViewTable> GetUnAssignedRequestsByUserName(string UserName, string Type, string SubType, int? asc)
        {
            using (PhNetworkEntities DataContext = new PhNetworkEntities())
            {
                List<ModelViewTable> UnAssignedRequests = new List<ModelViewTable>();
                var UserType = (from t in DataContext.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
               int LateTimeSecondNumber=Convert.ToInt32( DataContext.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "LateTimeSecondNumber").FirstOrDefault().ConfigurationValue);
                DateTime Time = DateTime.Now.AddSeconds(-LateTimeSecondNumber);

                if (UserType == "CallCenterUser")
                {
                    UnAssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.NewAutoGenerated) select r).Where(x => x.InsertionDate <= Time).ToList();
                    return UnAssignedRequests;
                }
                if (UserType == "CallCenterDoctor")
                {
                    UnAssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.PendingDoctorsAssign) select r).ToList();
                    return UnAssignedRequests;
                }
                if (UserType == "CallCenterAuditDoctor" || UserType == "CallCenterManager")
                {
                    UnAssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.PendingAuditAssign) select r).ToList();
                    return UnAssignedRequests;
                }
                if (UserType == "Administrator")
                {
                    UnAssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, null)
                                          where
                                          r.RequstStatusID == (int)RequestStatus.PendingDoctorsAssign ||
                                          r.RequstStatusID == (int)RequestStatus.PendingAuditAssign ||
                                          r.RequstStatusID == (int)RequestStatus.NewAutoGenerated
                                          select r).ToList();
                    return UnAssignedRequests;
                }
                else
                {
                    return UnAssignedRequests;
                }
            }
        }
        public int GetUnAssignedRequestsByUserNameCount(string UserName)
        {
            using (PhNetworkEntities DataContext = new PhNetworkEntities())
            {
                int LateTimeSecondNumber = Convert.ToInt32(DataContext.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "LateTimeSecondNumber").FirstOrDefault().ConfigurationValue);

                int UnAssignedRequests = 0;
                DateTime Time = DateTime.Now.AddSeconds(-LateTimeSecondNumber);
                var UserType = (from t in DataContext.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                if (UserType == "CallCenterUser")
                {
                    UnAssignedRequests = (from r in DataContext.EmailApprovalRequests where r.InsertionDate <= Time &&
                                          r.RequstStatusID == (int)RequestStatus.NewAutoGenerated select r.ID).Count();
                    return UnAssignedRequests;
                }
                if (UserType == "CallCenterDoctor")
                {
                    UnAssignedRequests = (from r in DataContext.EmailApprovalRequests where  
                                          r.RequstStatusID == (int)RequestStatus.PendingDoctorsAssign select r.ID).Count();
                    return UnAssignedRequests;
                }
                if (UserType == "CallCenterAuditDoctor" || UserType == "CallCenterManager")
                {
                    UnAssignedRequests = (from r in DataContext.EmailApprovalRequests where 
                                          r.RequstStatusID == (int)RequestStatus.PendingAuditAssign select r.ID).Count();
                    return UnAssignedRequests;
                }
                if (UserType == "Administrator")
                {
                    UnAssignedRequests = (from r in DataContext.EmailApprovalRequests
                                          where
                                        
                                          r.RequstStatusID == (int)RequestStatus.PendingDoctorsAssign ||
                                          r.RequstStatusID == (int)RequestStatus.PendingAuditAssign ||
                                          r.RequstStatusID == (int)RequestStatus.NewAutoGenerated
                                          select r.ID).Count();
                    return UnAssignedRequests;
                }
                else
                {
                    return UnAssignedRequests;
                }
            }
        }
        public List<ModelViewTable> GetAssignedTicketByUserName(string UserName, string Type, string SubType, int? asc)
        {

            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                List<ModelViewTable> AssignedRequests = new List<ModelViewTable>();
                var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();

                if (UserType == "CallCenterUser")
                {
                    AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, null) where r.OperatorAssignee == UserName && (r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored) select r).ToList();
                    return AssignedRequests;
                }
                if (UserType == "CallCenterDoctor")
                {
                    AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, null) where r.DoctorAssignee == UserName where r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored select r).ToList();
                    return AssignedRequests;
                }
                if (UserType == "CallCenterAuditDoctor")
                {
                    AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, null) where r.AuditAssignee == UserName where r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored select r).ToList();
                    return AssignedRequests;
                }
                if (UserType == "CallCenterManager")
                {
                    AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, null) where r.AuditAssignee == UserName where r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored select r).ToList();
                    return AssignedRequests;
                }
                else
                {
                    return AssignedRequests;
                }

            }


        }
        public int GetAssignedTicketByUserNameCount(string UserName)
        {

            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                int AssignedRequestsCount = 0;
                var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();

                if (UserType == "CallCenterUser")
                {
                    AssignedRequestsCount = (from r in Db.EmailApprovalRequests where r.OperatorAssignee == UserName && (r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored) select r.ID).Count();
                    return AssignedRequestsCount;
                }
                if (UserType == "CallCenterDoctor")
                {
                    AssignedRequestsCount = (from r in Db.EmailApprovalRequests where r.DoctorAssignee == UserName where r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored select r.ID).Count();
                    return AssignedRequestsCount;
                }
                if (UserType == "CallCenterAuditDoctor")
                {
                    AssignedRequestsCount = (from r in Db.EmailApprovalRequests where r.AuditAssignee == UserName where r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored select r.ID).Count();
                    return AssignedRequestsCount;
                }
                if (UserType == "CallCenterManager")
                {
                    AssignedRequestsCount = (from r in Db.EmailApprovalRequests where r.AuditAssignee == UserName where r.RequstStatusID != (int)RequestStatus.Closed && r.RequstStatusID != (int)RequestStatus.Ignored select r.ID).Count();
                    return AssignedRequestsCount;
                }
                else
                {
                    return AssignedRequestsCount;
                }

            }


        }
        public List<ModelViewTable> GetTicketForDirectorUser(string UserName, string Type, string SubType, int? asc, int PageNumber)
        {
            try
            {

                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    List<ModelViewTable> AssignedRequests = new List<ModelViewTable>();
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    if (PageNumber == 1)
                    {
                        AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.NewAutoGenerated)


                                            select r).ToList();
                        return AssignedRequests;
                    }
                    else if (PageNumber == 2)
                    {
                        AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.PendingDoctorsAssign)


                                            select r).ToList();
                    }
                    else if (PageNumber == 3)
                    {
                        AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.PendingAuditAssign)

                                            select r).ToList();
                    }
                    else if (PageNumber == 4)
                    {
                        AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.AssignedByOpeartor)


                                            select r).ToList();
                        return AssignedRequests;
                    }
                    else if (PageNumber == 5)
                    {
                        AssignedRequests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.AssignedByDoctor)


                                            select r).ToList();
                        AssignedRequests.AddRange((from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.EndTechnicalApproveByDoctor)


                                                   select r).ToList());

                        AssignedRequests.AddRange((from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.PendingTechnicalApproveByDoctor)


                                                   select r).ToList());





                        return AssignedRequests;
                    }
                    else if (PageNumber == 6)
                    {
                        AssignedRequests.AddRange((from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.AssignedByAudit)


                                                   select r).ToList());
                        AssignedRequests.AddRange((from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.EndTechnicalApproveByAudit)


                                                   select r).ToList());

                        AssignedRequests.AddRange((from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.PendingTechnicalApproveByAudit)


                                                   select r).ToList());






                        return AssignedRequests;
                    }





                    return AssignedRequests;




                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool AssignRequestToMe(string UserName, string UserID, int RequestID)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    EmailApprovalRequest ReqToAssign = new EmailApprovalRequest();
                    ReqToAssign = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.AssignedByOpeartor).FirstOrDefault().StatusName;//ReqToAssign.RequstStatusID;
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    if (UserType == "CallCenterUser")
                    {
                        if (ReqToAssign.OperatorAssignee == null)
                        {

                            try
                            {
                                Db.Entry(ReqToAssign).Reload();
                                if (ReqToAssign.OperatorAssignee == null)
                                {
                                    ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByOpeartor;
                                    ReqToAssign.OperatorAssignee = UserName;
                                    ReqToAssign.OperatorAssignTime = DateTime.Now;
                                   
                                    Db.SaveChanges();
                                    LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, OldValue, NewValue, "Request Assigned To Operator");
                                    //LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, "Not Assigned By Operator", "Assigned By Operator:" + UserName + "");

                                    return true;

                                }
                                else
                                {
                                    return false;
                                }
                            }
                            catch (Exception ex)
                            {

                                ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMe", "CallCenterSystemApp");
                                return false;
                            }



                        }

                        else
                        {
                            return false;
                        }
                    }
                    if (UserType == "CallCenterDoctor")
                    {
                        if (ReqToAssign.DoctorAssignee == null)
                        {


                            try
                            {

                                Db.Entry(ReqToAssign).Reload();
                                if (ReqToAssign.DoctorAssignee == null)
                                {
                                    ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByDoctor;
                                    ReqToAssign.DoctorAssignee = UserName;
                                    ReqToAssign.DoctorAssignTime = DateTime.Now;
                                    
                                    Db.SaveChanges();
                                    NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                                    LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, OldValue, NewValue, "Request Assigned To Doctor");
                                    //LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, "Not Assigned By Doctor", "Assigned By Doctor:" + UserName + "");
                                    return true;


                                }

                                return false;
                            }
                            catch (Exception ex)
                            {
                                ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMe", "CallCenterSystemApp");
                                return false;
                            }


                        }
                        else
                        {
                            return false;
                        }

                    }
                    if (UserType == "CallCenterAuditDoctor")
                    {
                        if (ReqToAssign.AuditAssignee == null)
                        {


                            try
                            {

                                Db.Entry(ReqToAssign).Reload();
                                if (ReqToAssign.AuditAssignee == null)
                                {
                                    ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByAudit;

                                    ReqToAssign.AuditAssignee = UserName;
                                    ReqToAssign.AuditAssigneeTime = DateTime.Now;

                                    Db.SaveChanges();
                                    NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                                    LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, OldValue, NewValue, "Request Assigned To Audit Doctor");

                                    //LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, "Not Assigned By Audit", "Assigned By Audit:" + UserName + "");
                                    return true;


                                }

                                return false;

                            }

                            catch (Exception ex)
                            {

                                ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMe", "CallCenterSystemApp");
                                return false;
                            }





                        }
                    }
                    if (UserType == "CallCenterManager")
                    {
                        if (ReqToAssign.AuditAssignee == null)
                        {


                            try
                            {

                                Db.Entry(ReqToAssign).Reload();
                                if (ReqToAssign.AuditAssignee == null)
                                {
                                    ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByAudit;
                                    ReqToAssign.AuditAssignee = UserName;
                                    ReqToAssign.AuditAssigneeTime = DateTime.Now;

                                    Db.SaveChanges();
                                    NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                                    LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, OldValue, NewValue, "Request Assigned To Manager To Audit");

                                    //LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, int.Parse(UserID), UserName, "Not Assigned By Manager Name (Audit)", "Assigned By Manager Name (Audit) :" + UserName + "");
                                    return true;


                                }

                                return false;


                            }

                            catch (Exception ex)
                            {
                                ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMe", "CallCenterSystemApp");
                                return false;
                            }


                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMe", "CallCenterSystemApp");
                return false;
            }

        }
        public bool ReleaseRequest(string UserName, string UserID, int RequestID)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                EmailApprovalRequest ReqToAssign = new EmailApprovalRequest();
                ReqToAssign = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                if (UserType == "CallCenterManager")
                {


                    try
                    {
                        if (ReqToAssign.RequstStatusID == (int)RequestStatus.PendingAuditAssign)
                        {
                            ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByAudit;
                        }
                        else if (ReqToAssign.RequstStatusID == (int)RequestStatus.PendingDoctorsAssign)

                        {
                            ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByDoctor;

                        }
                        Db.SaveChanges();
                        return true;
                    }

                    catch (Exception ex)
                    {
                        ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "ReleaseRequest", "CallCenterSystemApp");
                        return false;
                    }


                }
                return false;

            }
        }
        
        public bool AssignRequestToMGR(string UserName, string UserID, int RequestID, string AssignComment)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    EmailApprovalRequest ReqToAssign = new EmailApprovalRequest();
                    ReqToAssign = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";

                    if (UserType == "CallCenterManager")
                    {

                        if (ReqToAssign.AuditAssignee == null)
                        {

                            using (System.Data.Entity.DbContextTransaction dbTran = Db.Database.BeginTransaction())
                            {
                                try
                                {
                                    ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByAudit;
                                    ReqToAssign.AuditAssignee = UserName;
                                    ReqToAssign.AuditAssigneeTime = DateTime.Now;

                                    Db.SaveChanges();
                                    dbTran.Commit();
                                    NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                                    LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.AssignRequest, Int32.Parse(UserID), UserName, OldValue, NewValue, "Request Assigned To Manager To Audit");

                                    return true;
                                }

                                catch (Exception ex)
                                {
                                    dbTran.Rollback();
                                    ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMGR", "CallCenterSystemApp");
                                    return false;
                                }
                            }

                        }
                        else
                        {

                            using (System.Data.Entity.DbContextTransaction dbTran = Db.Database.BeginTransaction())
                            {
                                ReqToAssign.RequstStatusID = (int)RequestStatus.AssignedByAudit;
                                ReqToAssign.AuditAssignee = null;
                                ReqToAssign.AuditAssignee = UserName;
                                ReqToAssign.AuditAssigneeTime = DateTime.Now;

                                Db.SaveChanges();
                                dbTran.Commit();
                                NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToAssign.RequstStatusID).FirstOrDefault().StatusName;
                                LogEmailApprovalEvent(ReqToAssign.ID, (int)EmailApprovalLogTypes.ManagerOverRideAuthentcation, Convert.ToInt32(UserID), UserName, OldValue, NewValue, "Forced Assign");

                                return true;
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionHandlerConstants.CreateException(ex, "Helpers.cs", "AssignRequestToMGR", "CallCenterSystemApp");
                return false;
            }

        }

        public bool TransfareRequestToBoolOrUser(int RequestID, int UserID, string TransfareComment, out string ValidationMessage, string UserToTransfare = null)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = Db.EmailApprovalRequests.Where(x => x.ID == RequestID).SingleOrDefault();

                    var User = GetUserByID(UserID);
                    string LogNewValue = null;
                    string LogOldValue = null;

                    if (User.UserType == "CallCenterDoctor")
                    {
                        LogOldValue = Request.DoctorAssignee;
                        if (UserToTransfare != null)
                        {
                            Request.RequstStatusID = (int)RequestStatus.AssignedByDoctor;
                            Request.DoctorAssignee = UserToTransfare;
                            LogNewValue = UserToTransfare;
                        }
                        else
                        {
                            Request.RequstStatusID = (int)RequestStatus.PendingDoctorsAssign;
                            Request.DoctorAssignee = null;
                            Request.DoctorAssignTime = null;
                            LogNewValue = "N/A";
                        }
                    }
                    //New-----------------------------------------------------------------NEW
                    if (User.UserType == "CallCenterManager" && Request.AuditAssignee != User.UserName)
                    {
                        if (Request.RequstStatusID == (int)RequestStatus.AssignedByDoctor)
                        {
                            if (UserToTransfare != null)
                            {
                                Request.RequstStatusID = (int)RequestStatus.AssignedByDoctor;
                                Request.DoctorAssignee = UserToTransfare;
                                LogNewValue = UserToTransfare;
                            }
                            else
                            {
                                Request.RequstStatusID = (int)RequestStatus.PendingDoctorsAssign;
                                Request.DoctorAssignee = null;
                                Request.DoctorAssignTime = null;
                                LogNewValue = "N/A";
                            }

                        }
                        else if (Request.RequstStatusID == (int)RequestStatus.AssignedByAudit)
                        {
                            if (UserToTransfare != null)
                            {
                                Request.RequstStatusID = (int)RequestStatus.AssignedByAudit;
                                Request.AuditAssignee = UserToTransfare;
                                LogNewValue = UserToTransfare;
                            }
                            else
                            {
                                Request.RequstStatusID = (int)RequestStatus.PendingAuditAssign;
                                Request.AuditAssignee = null;
                                Request.AuditAssigneeTime = null;
                                LogNewValue = "N/A";
                            }
                        }


                    }


                    if ((User.UserType == "CallCenterAuditDoctor") || (User.UserType == "CallCenterManager" && Request.AuditAssignee == User.UserName))
                    {
                        LogOldValue = Request.AuditAssignee;
                        if (UserToTransfare != null)
                        {
                            Request.RequstStatusID = (int)RequestStatus.AssignedByAudit;
                            Request.AuditAssignee = UserToTransfare;
                            LogNewValue = UserToTransfare;
                        }
                        else
                        {
                            Request.RequstStatusID = (int)RequestStatus.PendingAuditAssign;
                            Request.AuditAssignee = null;
                            Request.AuditAssigneeTime = null;
                            LogNewValue = "N/A";
                        }
                    }
                    bool Success =  LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.TransfareRequestToBool, UserID, User.UserName, LogOldValue, LogNewValue, "Request Tranfered To Bool With Comment \"" + TransfareComment + "\"");
                    if (Success == true)
                    {
                        Db.SaveChanges();
                        ValidationMessage = "Request Transferred Successfully";
                        return true;
                    }
                    else
                    {
                        ValidationMessage = "Somthing Went Wrong ,Please Try Again";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Somthing Went Wrong";
                return false;
                throw;
            }
        }

        public List<ModelViewTable> GetAllClosedRequestOrByUserName(string UserName, string Type, string SubType, int? asc)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    List<ModelViewTable> ClosedTickets = new List<ModelViewTable>();
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    if (UserName == null)
                    {
                        ClosedTickets = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Closed) select r).ToList();
                        return ClosedTickets;
                    }
                    if (UserName != null && UserType == "CallCenterUser")
                    {
                        int number = (int)RequestStatus.Closed;
                        ClosedTickets = (from r in Model.SearchAllRequests(Type, SubType, asc, number)
                                         where
                                          (r.OperatorAssignee == UserName || r.CreatedBy == UserName)
                                         select r).ToList();
                        return ClosedTickets;
                    }
                    if (UserName != null && UserType == "CallCenterDoctor")
                    {
                        ClosedTickets = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Closed)
                                         where
                                          r.DoctorAssignee == UserName
                                         select r).ToList();
                        return ClosedTickets;

                    }
                    if (UserName != null && UserType == "CallCenterAuditDoctor")
                    {
                        ClosedTickets = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Closed)
                                         where
                                          r.AuditAssignee == UserName
                                         select r).ToList();
                        return ClosedTickets;

                    }
                    if (UserName != null && (UserType == "CallCenterManager" || UserType == "DirectorUser"))
                    {
                        ClosedTickets = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Closed)

                                             // && r.AuditAssignee == UserName
                                         select r).ToList();
                        return ClosedTickets;

                    }
                    else
                    {
                        return ClosedTickets;
                    }

                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public int GetAllClosedRequestOrByUserNameCount(string UserName)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int ClosedTickets = 0;
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    if (UserName == null)
                    {
                        ClosedTickets = (from r in Db.EmailApprovalRequests where r.RequstStatusID == (int)RequestStatus.Closed select r.ID).Count();
                        return ClosedTickets;
                    }
                    if (UserName != null && UserType == "CallCenterUser")
                    {
                        int number = (int)RequestStatus.Closed;
                        ClosedTickets = (from r in

                                        Db.EmailApprovalRequests
                                         where r.RequstStatusID == number &&
                                          (r.OperatorAssignee == UserName || r.CreatedBy == UserName)
                                         select r.ID).Count();
                        return ClosedTickets;
                    }
                    if (UserName != null && UserType == "CallCenterDoctor")
                    {
                        ClosedTickets = (from r in Db.EmailApprovalRequests
                                         where r.RequstStatusID == (int)RequestStatus.Closed
                                         &&
                                          r.DoctorAssignee == UserName
                                         select r.ID).Count();
                        return ClosedTickets;

                    }
                    if (UserName != null && UserType == "CallCenterAuditDoctor")
                    {
                        ClosedTickets = (from r in Db.EmailApprovalRequests
                                         where r.RequstStatusID == (int)RequestStatus.Closed
                                         &&
                                          r.AuditAssignee == UserName
                                         select r.ID).Count();
                        return ClosedTickets;

                    }
                    if (UserName != null && (UserType == "CallCenterManager" || UserType == "DirectorUser"))
                    {
                        ClosedTickets = (from r in Db.EmailApprovalRequests
                                         where r.RequstStatusID == (int)RequestStatus.Closed

                                         // && r.AuditAssignee == UserName
                                         select r.ID).Count();
                        return ClosedTickets;

                    }
                    else
                    {
                        return ClosedTickets;
                    }

                }
            }
            catch (Exception ex)
            {
                return 0;
            }

        }
        public bool TransfareRequestToAudit(int RequestID, string TransfareToAuditComment, string
            UserName, HttpPostedFile files, System.Web.UI.WebControls.FileUpload FileUpload1,
            out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;

                    EmailApprovalRequest ReqToTransfareToAudit = new EmailApprovalRequest();
                    ReqToTransfareToAudit = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToTransfareToAudit.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";

                    ReqToTransfareToAudit.TransferedToAuditComment = TransfareToAuditComment;
                    ReqToTransfareToAudit.TransferedToAuditTime = DateTime.Now;
                    ReqToTransfareToAudit.RequstStatusID = (int)RequestStatus.PendingAuditAssign;
                    ReqToTransfareToAudit.DoctorAction = "TransferToAudit";
                    ReqToTransfareToAudit.DoctorActionTime = DateTime.Now;
                  
                    bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, UserType, FileUpload1, false);
                    if (IsUploaded)
                    {                        
                        Db.SaveChanges();

                        NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToTransfareToAudit.RequstStatusID).FirstOrDefault().StatusName;
                        LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request Transfered To Audit Bool");
                        ValidationMessage = "Your Request Is Transfered Successfully";
                        return true;
                    }
                    else
                    {
                        ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                        return false;

                    }
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Error";
                return false;
            }

        }
        public void StartTechnicalApproveByUserType(string UserName, int RequestID, string TechnicalApproveNote)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;

                    EmailApprovalRequest ReqToBeTechnicallyApproved = new EmailApprovalRequest();
                    ReqToBeTechnicallyApproved = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";

                    if (UserType == "CallCenterDoctor")
                    {
                        ReqToBeTechnicallyApproved.TechnicalApproveByDoctorStartTime = DateTime.Now;
                        ReqToBeTechnicallyApproved.TechnicalApproveByDoctorNote = TechnicalApproveNote;
                        ReqToBeTechnicallyApproved.RequstStatusID = (int)RequestStatus.PendingTechnicalApproveByDoctor;
                       
                        Db.SaveChanges();
                        NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                        LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request Is Pending Technical Approve By Doctor");
                    }
                    if (UserType == "CallCenterAuditDoctor" || UserType == "CallCenterManager")
                    {
                        ReqToBeTechnicallyApproved.TechnicalApproveByAuditStartTime = DateTime.Now;
                        ReqToBeTechnicallyApproved.TechnicalApproveByAuditNote = TechnicalApproveNote;
                        ReqToBeTechnicallyApproved.RequstStatusID = (int)RequestStatus.PendingTechnicalApproveByAudit;

                        Db.SaveChanges();
                        NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                        LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request Is Pending Technical Approve By Audit");
                    }
                }
            }
            catch (Exception ex)
            {

            }

        }
        public void TechnicalApproveWithOtherTeam(string UserName, int RequestID,List<int> ListOfDepartments, string TechnicalApproveNote)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                    var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;

                    EmailApprovalRequest ReqToBeTechnicallyApproved = new EmailApprovalRequest();
                    List<EmailRequestRequest_TechnicalDestination> listTechnicalApproveDestination = new List<EmailRequestRequest_TechnicalDestination>();

                    ReqToBeTechnicallyApproved = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";


                    if (UserType == "CallCenterDoctor")
                    {

                        foreach (var item in ListOfDepartments)
                        {
                            EmailRequestRequest_TechnicalDestination TechnicalApproveDestination = new EmailRequestRequest_TechnicalDestination();

                             TechnicalApproveDestination.StartTechnicalApprovalTime = DateTime.Now;
                            TechnicalApproveDestination.RequestID = RequestID;
                            TechnicalApproveDestination.TechnicalDestinationID = item;
                            TechnicalApproveDestination.CallCenterNote = TechnicalApproveNote;
                            listTechnicalApproveDestination.Add(TechnicalApproveDestination);
                        }
                        Db.EmailRequestRequest_TechnicalDestination.AddRange(listTechnicalApproveDestination);
                        ReqToBeTechnicallyApproved.UserNameOpenTechnicalApprove = UserName;
                        ReqToBeTechnicallyApproved.RequstStatusID = (int)RequestStatus.PendingTechnicalApproveFromDepartments;

                        Db.SaveChanges();
                        NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                        LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request Is Pending Technical Approve From Departments");
                    }
                    if (UserType == "CallCenterAuditDoctor" || UserType == "CallCenterManager")
                    {
                        foreach (var item in ListOfDepartments)
                        {
                            EmailRequestRequest_TechnicalDestination TechnicalApproveDestination = new EmailRequestRequest_TechnicalDestination();

                            TechnicalApproveDestination.StartTechnicalApprovalTime = DateTime.Now;
                            TechnicalApproveDestination.RequestID = RequestID;
                            TechnicalApproveDestination.TechnicalDestinationID = item;
                            TechnicalApproveDestination.CallCenterNote = TechnicalApproveNote;
                            listTechnicalApproveDestination.Add(TechnicalApproveDestination);
                        }
                        Db.EmailRequestRequest_TechnicalDestination.AddRange(listTechnicalApproveDestination);
                        ReqToBeTechnicallyApproved.UserNameOpenTechnicalApprove = UserName;
                        ReqToBeTechnicallyApproved.RequstStatusID = (int)RequestStatus.PendingTechnicalApproveFromDepartments;
                       
                        Db.SaveChanges();
                        NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                        LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request Is Pending Technical Approve From Departments");
                    }
                }
            }
            catch (Exception ex)
            {

            }

        }
       


        public bool EndTechnicalApproveByUserType(string UserName, int RequestID,string Usertype, System.Web.UI.WebControls.FileUpload FileUpload1
            )
        {
            try
            {
                if (EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, Usertype, FileUpload1, false))
                {
                    using (PhNetworkEntities Db = new PhNetworkEntities())
                    {
                        EmailApprovalRequest ReqToBeTechnicallyApproved = new EmailApprovalRequest();
                        ReqToBeTechnicallyApproved = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                        var UserType = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t.UserType).SingleOrDefault().ToString();
                        var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;
                        string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                        string NewValue = "";

                        if (UserType == "CallCenterDoctor")
                        {
                            ReqToBeTechnicallyApproved.TechnicalApproveByDoctorEndTime = DateTime.Now;
                            ReqToBeTechnicallyApproved.RequstStatusID = (int)RequestStatus.EndTechnicalApproveByDoctor;
                           
                            Db.SaveChanges();
                            NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                            LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request's Technical Approve Approved By Doctor");
                        }
                        if (UserType == "CallCenterAuditDoctor" || UserType == "CallCenterManager")
                        {
                            ReqToBeTechnicallyApproved.TechnicalApproveByAuditEndTime = DateTime.Now;
                            ReqToBeTechnicallyApproved.RequstStatusID = (int)RequestStatus.EndTechnicalApproveByAudit;
                           
                            Db.SaveChanges();
                            NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToBeTechnicallyApproved.RequstStatusID).FirstOrDefault().StatusName;
                            LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValue, "Request's Technical Approve Approved By Audit Doctor");
                        }
                    }

                }
                return true;
            }
            catch (Exception ex)
            {
                return false;

            }

        }
        public bool EmailRequestFileUpload(HttpPostedFile files, int RequestID,
            string Usertype, System.Web.UI.WebControls.FileUpload FileUpload1, bool? IsInquiryFiles)
        {
            EmailApprovalsConfiguration Configuration  = new EmailApprovalsConfiguration();

            using (PhNetworkEntities Db = new PhNetworkEntities())
            { Configuration = Db.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "SaveTicketAttachmentPath").FirstOrDefault(); }

            var Request = GetEmailApprovalRequestByID(RequestID);
            string FilePath = null;
            string SavePath = null;
            bool IsTicketAttach = false;
            bool IsDoctorAttach = false;
            bool IsAuditAttach = false;
            bool IsInquiryAttach = false;
            bool IsReopenAttach = false;
            bool ISFaxAttach = false;
            bool IsDoctorTechnicalApproveAttachment = false;
            bool IsAuditTechnicalApproveAttachment = false;

            if (Usertype == "CallCenterUser" && Request.IsFaxMail == true)
            {
                FilePath = Configuration.ConfigurationValue+  "/EmailRequestAttach/" + RequestID + "/" + "FaxAttach";
                SavePath = "/EmailRequestAttach/" + RequestID + "/" + "FaxAttach";
                ISFaxAttach = true;
            }
            if (Usertype == "CallCenterUser" && IsInquiryFiles == false)
            {
                FilePath = Configuration.ConfigurationValue + "/EmailRequestAttach/" + RequestID + "/" + "TicketAttach";
                SavePath = "/EmailRequestAttach/" + RequestID + "/" + "TicketAttach";
                IsTicketAttach = true;
            }
            if (Usertype == "CallCenterUser" && IsInquiryFiles == true)
            {
                FilePath = Configuration.ConfigurationValue +  "/EmailRequestAttach/" + RequestID + "/" + "InquiryAttach";
                SavePath = "/EmailRequestAttach/" + RequestID + "/" + "InquiryAttach";
                IsInquiryAttach = true;
            }
            if (Usertype == "CallCenterDoctor")
            {
                if (Request.RequstStatusID == (int)RequestStatus.ReOpenedByDoctor)
                {

                    List<EmailRequestAttachmentsDetail> listOfAttachment = new List<EmailRequestAttachmentsDetail>();
                    using (PhNetworkEntities data = new PhNetworkEntities())

                    {
                        listOfAttachment = data.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == RequestID && x.IsReopeningAttachment == true).ToList();
                        foreach (var item in listOfAttachment)
                        {
                            if (item.IsReopeningAttachment == true)
                            {
                                item.IsReopeningAttachment = false;

                            }
                        }
                        data.SaveChanges();
                    }
                    FilePath = Configuration.ConfigurationValue + "/EmailRequestAttach/" + RequestID + "/" + "DoctorAttach/ReopenAttach";
                    SavePath = "/EmailRequestAttach/" + RequestID + "/" + "DoctorAttach/ReopenAttach";
                    IsDoctorAttach = true;
                    IsReopenAttach = true;
                }
                else if (Request.RequstStatusID == (int)RequestStatus.PendingTechnicalApproveByDoctor)
                {
                    FilePath = Configuration.ConfigurationValue + "/EmailRequestAttach/" + RequestID + "/" + "DoctorAttach/TechnicalApproveAttach";
                    SavePath = "/EmailRequestAttach/" + RequestID + "/" + "DoctorAttach/TechnicalApproveAttach";
                    IsDoctorAttach = true;
                    IsDoctorTechnicalApproveAttachment = true;
                }
                else
                {
                    FilePath = Configuration.ConfigurationValue +  "/EmailRequestAttach/" + RequestID + "/" + "DoctorAttach";
                    SavePath = "/EmailRequestAttach/" + RequestID + "/" + "DoctorAttach";
                    IsDoctorAttach = true;
                }

            }
            if (Usertype == "CallCenterAuditDoctor" || Usertype == "CallCenterManager")
            {
                if (Request.RequstStatusID == (int)RequestStatus.ReOpenedByAudit)
                {

                    List<EmailRequestAttachmentsDetail> listOfAttachment = new List<EmailRequestAttachmentsDetail>();
                    using (PhNetworkEntities data = new PhNetworkEntities())

                    {
                        listOfAttachment = data.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == RequestID && x.IsReopeningAttachment == true).ToList();
                        foreach (var item in listOfAttachment)
                        {
                            if (item.IsReopeningAttachment == true)
                            {
                                item.IsReopeningAttachment = false;

                            }
                        }
                        data.SaveChanges();

                    }



                    FilePath = Configuration.ConfigurationValue +  "/EmailRequestAttach/" + RequestID + "/" + "AuditAttach/ReopenAttach";
                    SavePath = "/EmailRequestAttach/" + RequestID + "/" + "AuditAttach/ReopenAttach";
                    IsReopenAttach = true;
                    IsAuditAttach = true;
                }
                else if (Request.RequstStatusID == (int)RequestStatus.PendingTechnicalApproveByAudit)
                {
                    
                    FilePath = Configuration.ConfigurationValue + "/EmailRequestAttach/" + RequestID + "/" + "AuditAttach/TechnicalApproveAttach";
                    SavePath = "/EmailRequestAttach/" + RequestID + "/" + "AuditAttach/TechnicalApproveAttach";
                    IsAuditAttach = true;
                    IsAuditTechnicalApproveAttachment = true;

                }
                else
                {
                    FilePath = Configuration.ConfigurationValue + "/EmailRequestAttach/" + RequestID + "/" + "AuditAttach";
                    SavePath = "/EmailRequestAttach/" + RequestID + "/" + "AuditAttach";
                    IsAuditAttach = true;
                }

            }
            try
            {
                foreach (HttpPostedFile postedFile in FileUpload1.PostedFiles)
                {

                    string fileName = Path.GetFileName(postedFile.FileName);

                    if (fileName != "")
                    {
                        if (!Directory.Exists(FilePath))
                        {
                            DirectoryInfo di = Directory.CreateDirectory(FilePath);
                        }


                        postedFile.SaveAs(FilePath + "/" + fileName);

                        using (PhNetworkEntities Db = new PhNetworkEntities())
                        {
                            EmailRequestAttachmentsDetail EmailRequestAttachDetails = new EmailRequestAttachmentsDetail();
                            EmailRequestAttachDetails.Name = fileName;
                            EmailRequestAttachDetails.Path = SavePath + "/" + fileName;
                            EmailRequestAttachDetails.IsTicketAttachment = IsTicketAttach;
                            EmailRequestAttachDetails.IsDoctorAttachment = IsDoctorAttach;
                            EmailRequestAttachDetails.IsAuditAttachment = IsAuditAttach;
                            EmailRequestAttachDetails.IsOtherAttachment = IsInquiryAttach;
                            EmailRequestAttachDetails.IsReopeningAttachment = IsReopenAttach;
                            EmailRequestAttachDetails.IsFaxAttachment = ISFaxAttach;
                            EmailRequestAttachDetails.TicketNumber = RequestID;
                            EmailRequestAttachDetails.IsDoctorTechnicalApproveAttachment = IsDoctorTechnicalApproveAttachment;
                            EmailRequestAttachDetails.IsAuditTechnicalApproveAttachment = IsAuditTechnicalApproveAttachment;
                            Db.EmailRequestAttachmentsDetails.Add(EmailRequestAttachDetails);
                            Db.SaveChanges();

                        }

                    }

                }
                return true;

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool FileUpload(string PathInDB, HttpPostedFile files, System.Web.UI.WebControls.FileUpload FileUpload1, int NoteID)
        {
            string FilePath = null;
            string SavePath = null;
            NoteAttachment NoteAttachment = new NoteAttachment();

            FilePath = PathInDB + "/NoteAttach/" + NoteID;
            SavePath = "/NoteAttach/" + NoteID;

            try
            {
                foreach (HttpPostedFile postedFile in FileUpload1.PostedFiles)
                {

                    string fileName = Path.GetFileName(postedFile.FileName);

                    if (fileName != "")
                    {
                        if (!Directory.Exists(FilePath))
                        {
                            DirectoryInfo di = Directory.CreateDirectory(FilePath);
                        }

                        var FullPath = FilePath + "/" + fileName;
                        postedFile.SaveAs(FilePath + "/" + fileName);


                        using (PhNetworkEntities Db = new PhNetworkEntities())
                        {
                            var noteAttaches = Db.NoteAttachments.Where(x => x.NoteAttachmentsName == fileName && x.NoteAttachmentsPath == SavePath + "/" + fileName && x.NoteID == NoteID).FirstOrDefault();

                            //To not duplicate records in table
                            if (noteAttaches == null)
                            {
                                NoteAttachment.NoteAttachmentsName = fileName;
                                NoteAttachment.NoteAttachmentsPath = SavePath + "/" + fileName;
                                NoteAttachment.NoteID = NoteID;
                                NoteAttachment.IsDeleted = false;
                                Db.NoteAttachments.Add(NoteAttachment);
                                Db.SaveChanges();
                            }
                            else if (noteAttaches != null && noteAttaches.IsDeleted == true)
                            {
                                noteAttaches.IsDeleted = false;
                                Db.NoteAttachments.AddOrUpdate(noteAttaches);
                                Db.SaveChanges();
                            }
                        }

                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                throw;
            }

            
        }
        public bool NoteFileUpload(HttpPostedFile files, System.Web.UI.WebControls.FileUpload FileUpload1, int NoteID)
        {
            string FilePath = null;

            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                FilePath = Db.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "SaveTicketAttachmentPath").FirstOrDefault().ConfigurationValue;
                FileUpload(FilePath, files, FileUpload1, NoteID);

                if (Db.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "TakeBackup").FirstOrDefault().ConfigurationValue == "1")
                {
                    FilePath = Db.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "AttachmentsBackupPath").FirstOrDefault().ConfigurationValue;
                    FileUpload(FilePath, files, FileUpload1, NoteID);
                }

            }
            return true;   
        }

        public List<EmailRequestAttachmentsDetail> GetAllAttachmentByRequestId(int RequesId)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var RequestAttachments = (from r in Db.EmailRequestAttachmentsDetails where r.TicketNumber == RequesId select r).ToList();
                    return RequestAttachments;

                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<NoteAttachment> GetAllAttachmentByNoteId(int NoteId)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var NoteAttachments = Db.NoteAttachments.Where(x => x.NoteID == NoteId && x.IsDeleted == false).ToList();
                    return NoteAttachments;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }
        public void CloseEmailRequest(int RequestID)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var RequestToBeClosed = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    RequestToBeClosed.ClosedTime = DateTime.Now;
                    RequestToBeClosed.RequstStatusID = (int)RequestStatus.Closed;
                    Db.SaveChanges();
                }
            }
            catch (Exception ex)
            {
            }
        }
        public void SaveAsFaxEmail(int Id, string DoctorName, string ClientName, string MedicalID, string MemberName, string ProviderName, string TicketCategoryID, string PriorityID,string FaxTicketsType)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserType = Db.CallCenterAppUsers.Where(p => p.UserName == DoctorName).FirstOrDefault().UserType;
                    var UserID = Db.CallCenterAppUsers.Where(p => p.UserName == DoctorName).FirstOrDefault().UserID;

                    var RequestSaved = (from r in Db.EmailApprovalRequests where r.ID == Id select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == RequestSaved.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";

                    RequestSaved.OperatorActionTime = DateTime.Now;
                    RequestSaved.OperatorAction = "SaveAsFax";
                    RequestSaved.ProviderName = ProviderName;
                    RequestSaved.PriorityID = Convert.ToInt32(PriorityID);
                    RequestSaved.TicketTypeID = Convert.ToInt32(FaxTicketsType);
                    RequestSaved.ApprovalCategoryID = Convert.ToInt32(TicketCategoryID);
                    if (UserType == "CallCenterDoctor")
                    {
                        RequestSaved.DoctorAssignee = DoctorName;
                        RequestSaved.DoctorAssignTime = DateTime.Now;
                    }
                    else
                    {
                        RequestSaved.AuditAssignee = DoctorName;
                        RequestSaved.AuditAssigneeTime = DateTime.Now;
                    }
                    RequestSaved.CompanyName = ClientName;
                    RequestSaved.Medical_ID = Convert.ToInt32(MedicalID);
                    RequestSaved.RequstStatusID = (int)RequestStatus.SavedAsFax;
                    RequestSaved.PatientName = MemberName;
                    
                    Db.SaveChanges();
                    NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == RequestSaved.RequstStatusID).FirstOrDefault().StatusName;
                    LogEmailApprovalEvent(Id, (int)EmailApprovalLogTypes.ChangeStatus, UserID, DoctorName, OldValue, NewValue, "Request Saved As Fax");
                }
            }
            catch (Exception ex)
            {
            }
        }
        public bool CreateBackup(HttpPostedFile files, int RequestID, string Usertype, System.Web.UI.WebControls.FileUpload FileUpload1, bool Inquiry)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    if (Db.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "TakeBackup").FirstOrDefault().ConfigurationValue == "1")
                    {

                        var Request = GetEmailApprovalRequestByID(RequestID);
                        string FilePath = null;
                        string BackupPath = Db.EmailApprovalsConfigurations.Where(p => p.ConfigurationKey == "AttachmentsBackupPath").FirstOrDefault().ConfigurationValue;

                        if (Usertype == "CallCenterUser")
                        {
                            if (Request.IsFaxMail == true)
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "FaxAttach";
                            }
                            else if (Inquiry == true)
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "InquiryTicketAttach";
                            }

                            else if (Inquiry != true)
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "TicketAttach";
                            }

                        }

                        if (Usertype == "CallCenterDoctor")
                        {
                            if (Request.RequstStatusID == (int)RequestStatus.ReOpenedByDoctor)
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "DoctorAttach/ReopenAttach";
                            }
                            else if (Request.RequstStatusID == (int)RequestStatus.EndTechnicalApproveByDoctor)
                            {                              
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "DoctorAttach/TechnicalApproveAttach";
                            }
                            else
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "DoctorAttach";
                            }

                        }
                        if (Usertype == "CallCenterAuditDoctor" || Usertype == "CallCenterManager")
                        {
                            if (Request.RequstStatusID == (int)RequestStatus.ReOpenedByAudit)
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "AuditAttach/ReopenAttach";
                            }
                            else if (Request.RequstStatusID == (int)RequestStatus.EndTechnicalApproveByAudit)
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "AuditAttach/TechnicalApproveAttach";
                            }
                            else
                            {
                                FilePath = BackupPath + "EmailRequestAttach/" + RequestID + "/" + "AuditAttach";
                            }

                        }
                        foreach (HttpPostedFile postedFile in FileUpload1.PostedFiles)
                        {
                            string fileName = Path.GetFileName(postedFile.FileName);

                            if (fileName != "")
                            {
                                if (!Directory.Exists(FilePath))
                                {
                                    DirectoryInfo di = Directory.CreateDirectory(FilePath);
                                }
                                FileUpload1.SaveAs(FilePath + "/" + FileUpload1.FileName);
                            }
                        }
                        return true;

                    }
                    return true;

                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public void AddEmailRequestMailingDetailsByRequestID(int RequestID, List<string> ToRecipients, List<string> CcRecipients, List<string> BccRecipients)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    List<EmailRequestMailingDetail> MailDetails = new List<EmailRequestMailingDetail>();
                    foreach (var item in ToRecipients)
                    {
                        EmailRequestMailingDetail temp = new EmailRequestMailingDetail()
                        {
                            Email = item.ToString(),
                            IsTO = true,
                            IsBCC = false,
                            IsCC = false,
                            TicketNumber = RequestID,
                            IsDeleted = false

                        };
                        MailDetails.Add(temp);

                    }
                    foreach (var item in CcRecipients)
                    {
                        EmailRequestMailingDetail temp = new EmailRequestMailingDetail()
                        {
                            Email = item.ToString(),
                            IsTO = false,
                            IsCC = true,
                            IsBCC = false,
                            IsDeleted = false,
                            TicketNumber = RequestID,
                        };
                        MailDetails.Add(temp);

                    }
                    foreach (var item in BccRecipients)
                    {
                        EmailRequestMailingDetail temp = new EmailRequestMailingDetail()
                        {
                            Email = item.ToString(),
                            IsTO = false,
                            IsCC = false,
                            IsBCC = true,
                            IsDeleted = false,
                            TicketNumber = RequestID
                        };
                        MailDetails.Add(temp);
                    }
                    foreach (var item in MailDetails)
                    {
                        Db.EmailRequestMailingDetails.Add(item);
                    }
                    Db.SaveChanges();
                }
            }
            catch (Exception ex)
            {                ExceptionHandlerConstants.CreateCustomException("OpenCcEmailRequest", "SubmitNewCallcenterEmailApproval", ex);

            }
        }
        public IEnumerable<EmailRequestMailingDetail> GetAllMailingDetailsByRequestID(int RequestID)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var FinalResult = Db.EmailRequestMailingDetails.Where(p => p.TicketNumber == RequestID && p.IsDeleted == false).ToList();
                    return FinalResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }


        }
        public List<string> UpdateEmails(int Request, List<string> ListOfPersons, string UserName, List<EmailRequestMailingDetail> ALLEmails)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Newresult = ListOfPersons.Where(p => !ALLEmails.Any(p2 => p2.Email == p));
                    var Deletedresult = ALLEmails.Where(p => !ListOfPersons.Any(p2 => p2 == p.Email));
                    List<string> newEmails = Newresult.Select(x => x).ToList();
                    foreach (var item in Deletedresult)

                    {
                        Db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Request && x.Email == item.Email).SingleOrDefault().IsDeleted = true;

                        Db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Request && x.Email == item.Email).SingleOrDefault().DeletedBy = UserName;
                        Db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Request && x.Email == item.Email).SingleOrDefault().DeletionTime = DateTime.Now;

                    }


                    Db.SaveChanges();
                    return newEmails;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool ApproveRequestByUserType(int RequestID, string Notes, string UserName, HttpPostedFile files, System.Web.UI.WebControls.FileUpload FileUpload1, string ServerMapPath, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var User = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t).SingleOrDefault();

                    EmailApprovalRequest ReqToApprove = new EmailApprovalRequest();
                    ReqToApprove = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToApprove.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";

                    if (User.UserType == "CallCenterDoctor")
                    {
                        if (ReqToApprove.RequstStatusID == (int)RequestStatus.ReOpenedByDoctor)
                        {
                            if (ReqToApprove.DoctorNotes != Notes)
                            {
                                var UpdateNotes = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateApproveOrRejectNotes, User.UserID, UserName, ReqToApprove.DoctorNotes, Notes);
                            }
                            var UpdateActionTime = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateActionTime, User.UserID, UserName, ReqToApprove.DoctorActionTime.ToString(), DateTime.Now.ToString());

                        }
                        ReqToApprove.DoctorNotes = Notes;
                        ReqToApprove.DoctorActionTime = DateTime.Now;
                        ReqToApprove.DoctorAction = "Approved";

                        bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, User.UserType, FileUpload1, false);

                        if (IsUploaded)
                        {
                            var EmailingResult = true;
                            if (ReqToApprove.IsFaxMail != true)
                            {
                                EmailingResult = SendEmail.SendApprovalEmail(RequestID, Notes);
                            }
                            else
                            {
                                AddFaxRequest(ReqToApprove);
                            }
                            if (EmailingResult)
                            {
                                ReqToApprove.RequstStatusID = (int)RequestStatus.ApprovedByDoctor;                                
                                Db.SaveChanges();

                                NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToApprove.RequstStatusID).FirstOrDefault().StatusName;
                                LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, User.UserID, UserName, OldValue, NewValue, "Request Approved By Doctor");
                                ValidationMessage = "Your Request Is Approved Successfully";
                                return true;
                            }
                            else
                            {
                                ValidationMessage = "Email Has Not Been Sent , Please Try a gain";
                                return false;
                            }
                        }
                        else
                        {
                            ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                            return false;

                        }
                    }
                    else if (User.UserType == "CallCenterAuditDoctor" || User.UserType == "CallCenterManager")
                    {
                        if (ReqToApprove.RequstStatusID == (int)RequestStatus.ReOpenedByAudit)
                        {
                            if (ReqToApprove.DoctorNotes != Notes)
                            {
                                var UpdateNotes = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateApproveOrRejectNotes, User.UserID, UserName, ReqToApprove.AuditNotes, Notes);
                            }
                            var UpdateActionTime = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateActionTime, User.UserID, UserName, ReqToApprove.AuditActionTime.ToString(), DateTime.Now.ToString());

                        }
                        ReqToApprove.AuditNotes = Notes;
                        ReqToApprove.AuditActionTime = DateTime.Now;
                        ReqToApprove.AuditAction = "Approved";
                        bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, User.UserType, FileUpload1, false);

                        if (IsUploaded == true)
                        {
                            var EmailingResult = true;
                            if (ReqToApprove.IsFaxMail != true)
                            {
                                EmailingResult=SendEmail.SendApprovalEmail(RequestID, Notes);
                            }
                            else
                            {
                                AddFaxRequest(ReqToApprove);
                            }
                            if (EmailingResult)
                            {
                                ReqToApprove.RequstStatusID = (int)RequestStatus.ApprovedByAudit;                               
                                Db.SaveChanges();

                                NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToApprove.RequstStatusID).FirstOrDefault().StatusName;
                                LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, User.UserID, UserName, OldValue, NewValue, "Request Approved By Audit");
                                ValidationMessage = "Your Request Is Approved Successfully";
                                return true;
                            }
                            else
                            {
                                ValidationMessage = "Email Has Not Been Sent , Please Try a gain";
                                return false;
                            }
                        }
                        else
                        {
                            ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                            return false;

                        }
                    }
                    else
                    {
                        ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Error";
                return false;
            }
        }
        public bool RejectRequestByUserType(int RequestID, string Notes, string UserName, HttpPostedFile files, System.Web.UI.WebControls.FileUpload FileUpload1, out string ValidationMessage)
        {

            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var User = (from t in Db.CallCenterAppUsers where t.UserName == UserName select t).SingleOrDefault();

                    EmailApprovalRequest ReqToApprove = new EmailApprovalRequest();
                    ReqToApprove = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToApprove.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = "";

                    if (User.UserType == "CallCenterDoctor")
                    {
                        if (ReqToApprove.RequstStatusID == (int)RequestStatus.ReOpenedByDoctor)
                        {
                            if (ReqToApprove.DoctorNotes != Notes)
                            {
                                var UpdateNotes = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateApproveOrRejectNotes, User.UserID, UserName, ReqToApprove.DoctorNotes, Notes);
                            }
                            var UpdateActionTime = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateActionTime, User.UserID, UserName, ReqToApprove.DoctorActionTime.ToString(), DateTime.Now.ToString());

                        }
                        ReqToApprove.DoctorNotes = Notes;
                        ReqToApprove.DoctorActionTime = DateTime.Now;
                        ReqToApprove.DoctorAction = "Rejected";

                        bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, User.UserType, FileUpload1, false);

                        if (IsUploaded)
                        {
                            var EmailingResult = true;
                            if (ReqToApprove.IsFaxMail != true)
                            {
                                EmailingResult = SendEmail.SendRejectionEmail(RequestID, Notes);
                            }
                            else
                            {
                                AddFaxRequest(ReqToApprove);
                            }
                            if (EmailingResult)
                            {
                                ReqToApprove.RequstStatusID = (int)RequestStatus.RejectedByDoctor;                                
                                Db.SaveChanges();

                                NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToApprove.RequstStatusID).FirstOrDefault().StatusName;
                                LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, User.UserID, UserName, OldValue, NewValue, "Request Rejected By Doctor");
                                ValidationMessage = "Your Request Is Approved Successfully";
                                return true;
                            }
                            else
                            {
                                ValidationMessage = "Email Has Not Been Sent , Please Try a gain";
                                return false;
                            }
                        }
                        else
                        {
                            ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                            return false;

                        }
                    }
                    else if (User.UserType == "CallCenterAuditDoctor" || User.UserType == "CallCenterManager")
                    {
                        if (ReqToApprove.RequstStatusID == (int)RequestStatus.ReOpenedByAudit)
                        {
                            if (ReqToApprove.DoctorNotes != Notes)
                            {
                                var UpdateNotes = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateApproveOrRejectNotes, User.UserID, UserName, ReqToApprove.AuditNotes, Notes);
                            }
                            var UpdateActionTime = LogEmailApprovalEvent(ReqToApprove.ID, (int)EmailApprovalLogTypes.UpdateActionTime, User.UserID, UserName, ReqToApprove.AuditActionTime.ToString(), DateTime.Now.ToString());

                        }
                        ReqToApprove.AuditNotes = Notes;
                        ReqToApprove.AuditActionTime = DateTime.Now;
                        ReqToApprove.AuditAction = "Rejected";
                        bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, User.UserType, FileUpload1, false);

                        if (IsUploaded == true)
                        {
                                 var EmailingResult = true;
                            if (ReqToApprove.IsFaxMail != true)
                            {
                                EmailingResult = SendEmail.SendRejectionEmail(RequestID, Notes);
                            }
                            else
                            {
                                AddFaxRequest(ReqToApprove);
                            }
                            if (EmailingResult)
                            {
                                ReqToApprove.RequstStatusID = (int)RequestStatus.RejectedByAudit;                                
                                Db.SaveChanges();

                                NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReqToApprove.RequstStatusID).FirstOrDefault().StatusName;
                                LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, User.UserID, UserName, OldValue, NewValue, "Request Rejected By Audit");
                                ValidationMessage = "Your Request Is Approved Successfully";
                                return true;
                            }
                            else
                            {
                                ValidationMessage = "Email Has Not Been Sent , Please Try a gain";
                                return false;
                            }
                        }
                        else
                        {
                            ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                            return false;

                        }
                    }
                    else
                    {
                        ValidationMessage = "File(s) Have Not Been Uploaded and Email Is Not Sent , Please Try a gain";
                        return false;
                    }

                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Error";
                return false;
            }

        }
        public List<CallCenterAppUser> GetAllUsers(string UserName)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                var AllUsers = (from u in Db.CallCenterAppUsers where u.UserType == "CallCenterDoctor" || u.UserType == "CallCenterAuditDoctor" || u.UserType == "CallCenterManager" where u.UserName != UserName select u).ToList();
                return AllUsers;

            }
        }
        public CallCenterAppUser GetUserByID(int UserID)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                var User = (from u in Db.CallCenterAppUsers where u.UserID == UserID select u).SingleOrDefault();
                return User;
            }
        }
        public bool ChangeUserTypeByUserID(int UserID, string UserType, out string ValidationMessage)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                var User = (from u in Db.CallCenterAppUsers where u.UserID == UserID select u).SingleOrDefault();
                int PendingTickets = 0;


                if (User.UserType == UserType)
                {
                    ValidationMessage = "You Have Chosen The Same User Type For This User , Please Select Different User Type";
                    return false;
                }
                if (User.UserType != UserType)
                {

                    PendingTickets = (from r in Db.EmailApprovalRequests
                                      where r.DoctorAssignee == User.UserName || r.DoctorAssignee == User.UserName
                                      where
                                        r.RequstStatusID != (int)RequestStatus.Closed
                                        &&
                                        r.RequstStatusID != (int)RequestStatus.Ignored

                                      select r.ID).Count();



                    if (PendingTickets > 0)
                    {
                        ValidationMessage = "You Can't Change This User Type , Because He/She Has " + PendingTickets + " Request(s) Pending";
                        return false;
                    }
                    if (PendingTickets == 0)
                    {
                        User.UserType = UserType;
                        Db.SaveChanges();
                        ValidationMessage = "The User Type Is Changed to " + UserType + " Successfully";
                        return true;
                    }
                    else
                    {
                        ValidationMessage = "Something Went Wrong , Please Try Again Later";

                        return false;
                    }
                }
                else
                {
                    ValidationMessage = "Something Went Wrong , Please Try Again Later";
                    return false;
                }

            }

        }

    
        public bool IgnoreAndCloseEmailRequestUserName(int RquestID, string UserName, out string ValidationMessage)
        {

            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;
                    var UserType = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserType;
                    var NewValue = (int)RequestStatus.Ignored;
                    string NewValueName = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.Ignored).FirstOrDefault().StatusName;
                    ValidationMessage = "";

                    if (UserType == "CallCenterDoctor")
                    {
                        var RequestToIgnoreAndClose = (from r in Db.EmailApprovalRequests where r.ID == RquestID select r).SingleOrDefault();
                        string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == RequestToIgnoreAndClose.RequstStatusID).FirstOrDefault().StatusName;

                        RequestToIgnoreAndClose.DoctorAction = "IgnoredByDoctor";
                        RequestToIgnoreAndClose.DoctorActionTime = DateTime.Now;
                        RequestToIgnoreAndClose.RequstStatusID = NewValue;
                        RequestToIgnoreAndClose.ClosedTime = DateTime.Now;

                        Db.SaveChanges();
                        LogEmailApprovalEvent(RquestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName, "Requst Ignored By Doctor");
                        ValidationMessage = "Ticket Ignored Successfully";
                        return true;
                    }
                    else if (UserType == "CallCenterAuditDoctor" || UserType == "CallCenterManager")

                    {
                        var RequestToIgnoreAndClose = (from r in Db.EmailApprovalRequests where r.ID == RquestID select r).SingleOrDefault();
                        string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == RequestToIgnoreAndClose.RequstStatusID).FirstOrDefault().StatusName;

                        RequestToIgnoreAndClose.AuditAction = "IgnoredByAudit";
                        RequestToIgnoreAndClose.AuditActionTime = DateTime.Now;
                        RequestToIgnoreAndClose.RequstStatusID = NewValue;
                        RequestToIgnoreAndClose.ClosedTime = DateTime.Now;

                        Db.SaveChanges();
                        LogEmailApprovalEvent(RquestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName, "Requst Ignored By Audit");
                        ValidationMessage = "Ticket Ignored Successfully";
                        return true;
                    }
                    else if (UserType == "CallCenterUser")

                    {
                        var RequestToIgnoreAndClose = (from r in Db.EmailApprovalRequests where r.ID == RquestID select r).SingleOrDefault();
                        string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == RequestToIgnoreAndClose.RequstStatusID).FirstOrDefault().StatusName;

                        RequestToIgnoreAndClose.OperatorAction = "IgnoredByOperator";
                        RequestToIgnoreAndClose.OperatorActionTime = DateTime.Now;
                        RequestToIgnoreAndClose.RequstStatusID = NewValue;
                        RequestToIgnoreAndClose.ClosedTime = DateTime.Now;

                        Db.SaveChanges();
                        LogEmailApprovalEvent(RquestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName, "Requst Ignored By Operator");
                        ValidationMessage = "Ticket Ignored Successfully";
                        return true;
                    }

                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception)
            {
                ValidationMessage = "Somthing Went Wrong , Please Try Again";
                return false;
            }

        }
        public bool OpenIsAutoGeneratedRequest(int Id, string UserName, HttpPostedFile files,
            System.Web.UI.WebControls.FileUpload FileUpload1, string ProviderName,
            string CallcenterOpenNote, int TicketType,
             string TicketCategoryID, string PriorityID,
            string ServerMapPath,
           string MemberName, string ClientName, int MedicalID
            , out string ValidationMessage,string FaxNumber,List<string> newpersonrecive)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;

                    EmailApprovalRequest EmailRequest = new EmailApprovalRequest();
                    EmailRequest = Db.EmailApprovalRequests.Where(x => x.ID == Id).FirstOrDefault();

                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == EmailRequest.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValueName = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.PendingDoctorsAssign).FirstOrDefault().StatusName;
                    var NewValue = (int)RequestStatus.PendingDoctorsAssign;

                    EmailRequest.ProviderName = ProviderName;
                    EmailRequest.CreatedByNotes = CallcenterOpenNote;
                    EmailRequest.TicketTypeID = TicketType;
                    EmailRequest.OperatorActionTime = DateTime.Now;
                    string UserType = "CallCenterUser";
                    EmailRequest.Medical_ID = MedicalID;
                    EmailRequest.PatientName = MemberName;
                    EmailRequest.CompanyName = ClientName;
                    EmailRequest.TransferedToDoctorsTime = DateTime.Now;
                    EmailRequest.RequstStatusID = NewValue;
                    EmailRequest.ColorID = null;
                    EmailRequest.PriorityID = Convert.ToInt32(PriorityID);
                    EmailRequest.ApprovalCategoryID = Convert.ToInt32(TicketCategoryID);
                    if (EmailRequest.IsFaxMail == true)
                    {
                        EmailRequest.FaxNumber = FaxNumber;
                    }
                    else
                    {
                        EmailApprovalReceivingReceipt Receipt = new EmailApprovalReceivingReceipt()
                        {
                            EmailApprovalReceivingReceiptTo = newpersonrecive.FirstOrDefault().ToLower().ToString(),
                             EmailApprovalRequestFK = EmailRequest.ID,
                            IsSent = false,
                            IsActive = true,
                            IsDeleted = false,
                            CreationDate = DateTime.Now
                        };
                        Db.EmailApprovalReceivingReceipts.Add(Receipt);
                    }
                    EmailRequest.OperatorAction = "OpenNewTicket";
                    if (FileUpload1.HasFiles)
                    {
                        bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, EmailRequest.ID, UserType, FileUpload1, false);
                        if (IsUploaded == true)
                        {
                            Db.SaveChanges();

                            LogEmailApprovalEvent(Id, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName, "New Request Opened By Operator");
                            ValidationMessage = "Ticket Opened Successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Error In Uploading Files ,Please Check Files And Try Again";
                            return false;
                        }
                    }
                    else
                    {
                        Db.SaveChanges();

                        LogEmailApprovalEvent(Id, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName);
                        ValidationMessage = "Ticket Opened Successfully";
                        return true;
                    }
                }

            }
            catch (Exception ex)
            {
                ValidationMessage = ex.Message;
                return false;
            }

        }
        public bool ReplyOnInquiryByOperator(int RequestID, string OperatorNote,
            int MemberTypeFlag, string UserName,
            HttpPostedFile files, System.Web.UI.WebControls.FileUpload FileUpload1, out string ValidationMessage)
        {


            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    Mailing Mailing = new Mailing();
                    string UserType = "CallCenterUser";

                    var UserID = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault().UserID;
                    var ReplyOnInquiryRequest = Db.EmailApprovalRequests.Where(p => p.ID == RequestID).FirstOrDefault();
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == ReplyOnInquiryRequest.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValueName = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.PendingDoctorsAssign).FirstOrDefault().StatusName;
                    var NewValue = (int)RequestStatus.RepliedOnInquiry;

                    ReplyOnInquiryRequest.OperatorNotes = OperatorNote;
                    ReplyOnInquiryRequest.TicketTypeID = (int)TicketTypes.Inquiries;
                    ReplyOnInquiryRequest.OperatorAction = "RepliedOnInquiry";
                    ReplyOnInquiryRequest.OperatorActionTime = DateTime.Now;
                    ReplyOnInquiryRequest.IsInquiryTicket = true;
                    ReplyOnInquiryRequest.RequstStatusID = NewValue;
                    if (FileUpload1.HasFiles)
                    {
                        bool IsUploaded = EmailRequestFileUpload(FileUpload1.PostedFile, ReplyOnInquiryRequest.ID, UserType, FileUpload1, true);
                        if (IsUploaded == true)
                        {
                            var IsMailSent = Mailing.SendIquiryReplyMail(ReplyOnInquiryRequest.ID, ReplyOnInquiryRequest.OperatorNotes, MemberTypeFlag);
                            if (IsMailSent == true)
                            {
                                Db.SaveChanges();

                                LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName, "Operator Replay On Inquiry");
                                ValidationMessage = "Reply Sent Successfully";
                                return true;
                            }
                            else
                            {
                                ValidationMessage = "Reply Mail Not Sent ,Please try Again";
                                return false;
                            }

                        }
                        else
                        {
                            ValidationMessage = "Error In Uploading Files ,Please Check Files And Try Again";
                            return false;
                        }
                    }
                    else
                    {
                        var IsMailSent = Mailing.SendIquiryReplyMail(ReplyOnInquiryRequest.ID, ReplyOnInquiryRequest.OperatorNotes, MemberTypeFlag);

                        if (IsMailSent == true)
                        {
                            Db.SaveChanges();

                            LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, UserName, OldValue, NewValueName, "Operator Replay On Inquiry");
                            ValidationMessage = "Reply Sent Successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Reply Mail Not Sent ,Please try Again";
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Error";
                return false;
            }


        }
        public bool LogEmailApprovalEvent(int? RequestID, int LogTypeID, int UserID, string UserName, string OldValue, string NewValue, string LogComment = null)
        {

            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    EmailApprovalLogsDetail LogObj = new EmailApprovalLogsDetail();

                    LogObj.RequestID = RequestID;
                    LogObj.LogTypeID = LogTypeID;
                    LogObj.UserID = UserID;
                    LogObj.UserName = UserName;
                    LogObj.OldValue = OldValue;
                    LogObj.NewValue = NewValue;
                    LogObj.LogTime = DateTime.Now;
                    LogObj.Comment = LogComment;
                    Db.EmailApprovalLogsDetails.Add(LogObj);
                    Db.SaveChanges();
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }




        public bool ReOpenEmailApprovalRequest(int RequestID, int UserID, string ReOpenComment, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = Db.EmailApprovalRequests.Where(x => x.ID == RequestID).FirstOrDefault();
                    var User = GetUserByID(UserID);
                    string LogOldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == Request.RequstStatusID).FirstOrDefault().StatusName;
                    string LogNewValue = null;
                    //int? LogOldValue = Request.RequstStatusID;//(RequestStatus)Enum.Parse(typeof(RequestStatus), Request.RequstStatusID.ToString())


                        ;
                    string UserOldName = "";
                    try
                    {
                        if (User.UserType == "CallCenterDoctor")
                        {
                            Request.RequstStatusID = (int)RequestStatus.ReOpenedByDoctor;
                            UserOldName = Request.DoctorAssignee;
                            Request.DoctorAssignee = User.UserName;
                            LogNewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.ReOpenedByDoctor).FirstOrDefault().StatusName;
                        }
                        if (User.UserType == "CallCenterAuditDoctor" || User.UserType == "CallCenterManager")
                        {
                            Request.RequstStatusID = (int)RequestStatus.ReOpenedByAudit;
                            Request.AuditAssignee = User.UserName;
                            UserOldName = Request.AuditAssignee;

                            LogNewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.ReOpenedByAudit).FirstOrDefault().StatusName;
                        }

                        var Success = LogEmailApprovalEvent(
                            RequestID,
                            (int)EmailApprovalLogTypes.ReopenTicket,
                            UserID,
                            User.UserName,
                            LogOldValue, //+ "-" + UserOldName,
                            LogNewValue, //+ "-" + User.UserName,
                            "Request Is Reopened with comment \"" + ReOpenComment + "\"");
                        if (Success == true)
                        {
                            Db.SaveChanges();
                            ValidationMessage = "Request ReOpened Successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Somthing Went Wrong ,Please Try Again";
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        ValidationMessage = "Somthing Went Wrong ,Please Try Again";
                        return false;
                        throw;
                    }
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Error";
                return false;
            }
        }
        public void UpdateUserActivationData(string UserName)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {

                    var userData = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault();
                    userData.MACAddress = ""/* GetPCName().ToString()*/;
                    userData.IsActive = true;
                    Db.SaveChanges();
                }
            }
            catch (Exception ex)
            {
            }

        }
        public static void DeleteUserActivationData(string UserName)
        {

            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var userData = Db.CallCenterAppUsers.Where(x => x.UserName == UserName).FirstOrDefault();
                    userData.MACAddress = string.Empty;
                    userData.IsActive = false;
                    Db.SaveChanges();

                }
            }
            catch (Exception ex)
            {
            }
        }
        //public static string GetPCName()
        //{
        //    return null;
        //}
        public EmailApprovalRequest GetEmailApprovalRequestByID(int RequestID)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                    return Request;

                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool ChangeEmailRequestMedicalID(int RequestID, int UserID, int NewValue, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = Db.EmailApprovalRequests.Where(x => x.ID == RequestID).SingleOrDefault();
                    var User = GetUserByID(UserID);
                    var Oldvalue = Request.Medical_ID;

                    if (Oldvalue == NewValue)
                    {
                        ValidationMessage = "you have entered the same Medical ID";
                        return false;
                    }
                    else
                    {
                        var Succsses = LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeMedicalID, UserID, User.UserName, Oldvalue.ToString(), NewValue.ToString(), "Medical ID Of Request Changed");
                        if (Succsses)
                        {
                            Request.Medical_ID = NewValue;
                            Db.SaveChanges();
                            ValidationMessage = "Medical ID changed successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Something went wrong ,please try again later";
                            return false;
                        }
                    }
                }
            }
            catch (Exception)
            {
                ValidationMessage = "Error";
                return false;
            }
        }
        public bool ChangeEmailRequestFaxNumber(int RequestID, int UserID, string NewValue, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = Db.EmailApprovalRequests.Where(x => x.ID == RequestID).SingleOrDefault();
                    var User = GetUserByID(UserID);
                    var Oldvalue = Request.FaxNumber;

                    if (Oldvalue == NewValue)
                    {
                        ValidationMessage = "you have entered the same Fax Number";
                        return false;
                    }
                    else
                    {
                        var Succsses = LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeEmailRequestFaxNumber, UserID, User.UserName, Oldvalue.ToString(), NewValue.ToString(), "Fax Number Changed");
                        if (Succsses)
                        {
                            Request.FaxNumber = NewValue;
                            EmailApprovalRequest ReqToApprove = new EmailApprovalRequest();
                           
                                ReqToApprove = (from r in Db.EmailApprovalRequests where r.ID == RequestID select r).SingleOrDefault();
                                this.AddFaxRequest(ReqToApprove);
                                Db.SaveChanges();
                            ValidationMessage = "Fax Number changed successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Something went wrong ,please try again later";
                            return false;
                        }
                    }
                }
            }
            catch (Exception)
            {
                ValidationMessage = "Error";
                return false;
            }
        }

        public bool ChangeEmailRequestApprovalCategory(int RequestID, int UserID, string NewValue, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = Db.EmailApprovalRequests.Where(x => x.ID == RequestID).SingleOrDefault();
                    var User = GetUserByID(UserID);
                    var Oldvalue = Request.ApprovalCategoryID;


                    if (Oldvalue == Convert.ToInt32(NewValue))
                    {
                        ValidationMessage = "you have entered the same Approval Category";
                        return false;
                    }
                    else
                    {
                        var Succsses = LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeEmailRequestApprovalCategory, UserID, User.UserName, Oldvalue.ToString(), NewValue.ToString(), "Approval Category Of Request Changed");
                        if (Succsses)
                        {
                            Request.ApprovalCategoryID = Convert.ToInt32(NewValue);
                            Db.SaveChanges();
                            ValidationMessage = "Approval Category changed successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Something went wrong ,please try again later";
                            return false;
                        }
                    }
                }
            }
            catch (Exception)
            {
                ValidationMessage = "Error";
                return false;
            }
        }        
        public bool ChangeEmailRequestType(int RequestID, int UserID, string NewValue, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = Db.EmailApprovalRequests.Where(x => x.ID == RequestID).SingleOrDefault();
                    var User = GetUserByID(UserID);
                    var Oldvalue = Request.TicketTypeID;

                    if (Oldvalue == Convert.ToInt32(NewValue))
                    {
                        ValidationMessage = "you have entered the same Request Type";
                        return false;
                    }
                    else
                    {
                        var Succsses = LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.EditTicketType, UserID, User.UserName, Oldvalue.ToString(), NewValue.ToString(), "Request Type changed");
                        if (Succsses)
                        {
                            Request.TicketTypeID = Convert.ToInt32(NewValue);
                            Db.SaveChanges();
                            ValidationMessage = "Request Type changed successfully";
                            return true;
                        }
                        else
                        {
                            ValidationMessage = "Something went wrong ,please try again later";
                            return false;
                        }
                    }
                }
            }
            catch (Exception)
            {
                ValidationMessage = "Error";
                return false;
            }
        }


        public List<CallCenterAppUser> GetActiveUsersByType(string UserType)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var ActiveUsers = (from u in Db.CallCenterAppUsers where u.UserType == UserType && u.IsActive == true select u).ToList();
                    return ActiveUsers;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<CallCenterAppUser> GetAllActiveDoctorsAndAuditUsers()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var ActiveUsers = (from u in Db.CallCenterAppUsers where (u.UserType == "CallCenterDoctor" || u.UserType == "CallCenterManager" || u.UserType == "CallCenterAuditDoctor") && u.IsActive == true select u).ToList();
                    return ActiveUsers;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<CallCenterAppUser> GetAllDoctorsAndAudite()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var ActiveUsers = (from u in Db.CallCenterAppUsers where (u.UserType == "CallCenterDoctor" || u.UserType == "CallCenterManager" || u.UserType == "CallCenterAuditDoctor") select u).ToList();
                    return ActiveUsers;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool SubmitFaxRequest(int RequestID, int MedicalID, HttpPostedFile files,
            System.Web.UI.WebControls.FileUpload FileUpload1, string ProviderName,
             int ApprovalCategoryID, int PriorityID, string ServerMapPath,
           string MemberName, string ClientName, int DoctorOrAuditAssignID, out string ValidationMessage)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var Request = GetEmailApprovalRequestByID(RequestID);
                    //int? OldValue = Request.RequstStatusID;
                    string OldValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == Request.RequstStatusID).FirstOrDefault().StatusName;
                    string NewValue = Db.EmailRequestStatusDIMs.Where(x => x.ID == (int)RequestStatus.Closed).FirstOrDefault().StatusName;
                    var DoctorOrAuditAssignUser = GetUserByID(DoctorOrAuditAssignID);

                    Request.Medical_ID = MedicalID;
                    Request.ProviderName = ProviderName;
                    Request.ApprovalCategoryID = ApprovalCategoryID;
                    Request.PriorityID = PriorityID;
                    Request.PatientName = MemberName;
                    Request.CompanyName = ClientName;
                    Request.RequstStatusID = (int)RequestStatus.Closed;

                    if (DoctorOrAuditAssignUser.UserType == "CallCenterDoctor")
                    {
                        Request.DoctorAssignee = DoctorOrAuditAssignUser.UserName;
                        Request.DoctorAssignTime = DateTime.Now;
                        Request.DoctorAction = "FaxRequest";
                        Request.DoctorActionTime = DateTime.Now;
                    }
                    else if (DoctorOrAuditAssignUser.UserType == "CallCenterAuditDoctor" || DoctorOrAuditAssignUser.UserType == "CallCenterManager")
                    {
                        Request.AuditAssignee = DoctorOrAuditAssignUser.UserName;
                        Request.AuditAssigneeTime = DateTime.Now;
                        Request.AuditAction = "FaxRequest";
                        Request.AuditActionTime = DateTime.Now;
                    }

                    var SuccessUpload = EmailRequestFileUpload(FileUpload1.PostedFile, RequestID, DoctorOrAuditAssignUser.UserType, FileUpload1, false);
                    if (SuccessUpload)
                    {
                        LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, DoctorOrAuditAssignID, DoctorOrAuditAssignUser.UserName, OldValue, NewValue, "Fax Request Closed");
                        Db.SaveChanges();
                        ValidationMessage = "Fax Request submitted successfully";
                        return true;
                    }
                    else
                    {
                        ValidationMessage = "Fax Request is not submitted ,please try again";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = "Somthing went wrong ,please try again";
                return false;
                throw;
            }

        }
        public List<ModelViewTable> GetIgnoredRequestsByUserName(string UserName, string Type, string SubType, int? asc)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var user = (from u in Db.CallCenterAppUsers where u.UserName == UserName select u).SingleOrDefault();
                    List<ModelViewTable> Requests = new List<ModelViewTable>();
                    if (user.UserType == "CallCenterUser")
                    {
                        Requests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Ignored) where r.OperatorAssignee == UserName select r).ToList();
                        return Requests;
                    }
                    else if (user.UserType == "CallCenterDoctor")
                    {
                        Requests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Ignored) where r.DoctorAssignee == UserName select r).ToList();
                        return Requests;
                    }
                    else if (user.UserType == "CallCenterAuditDoctor")
                    {
                        Requests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Ignored)
                                    where
r.AuditAssignee == UserName

                                    select r).ToList();
                        return Requests;
                    }

                    else if (UserName != null && (user.UserType == "CallCenterManager" || user.UserType == "DirectorUser"))
                    {
                        Requests = (from r in Model.SearchAllRequests(Type, SubType, asc, (int)RequestStatus.Ignored)

                                        //r.AuditAssignee == UserName &&
                                    select r).ToList();
                        return Requests;
                    }


                    else
                    {
                        return Requests;
                    }
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public int GetIgnoredRequestsByUserNameCount(string UserName)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var user = (from u in Db.CallCenterAppUsers where u.UserName == UserName select u).SingleOrDefault();
                    int Requests = 0;
                    if (user.UserType == "CallCenterUser")
                    {
                        Requests = (from r in Db.EmailApprovalRequests where r.RequstStatusID == (int)RequestStatus.Ignored && r.OperatorAssignee == UserName select r.ID).Count();
                        return Requests;
                    }
                    else if (user.UserType == "CallCenterDoctor")
                    {
                        Requests = (from r in Db.EmailApprovalRequests where r.RequstStatusID == (int)RequestStatus.Ignored && r.DoctorAssignee == UserName select r.ID).Count();
                        return Requests;
                    }
                    else if (user.UserType == "CallCenterAuditDoctor")
                    {
                        Requests = (from r in Db.EmailApprovalRequests
                                    where
                                  r.RequstStatusID == (int)RequestStatus.Ignored && r.AuditAssignee == UserName

                                    select r.ID).Count();
                        return Requests;
                    }

                    else if (UserName != null && (user.UserType == "CallCenterManager" || user.UserType == "DirectorUser"))
                    {
                        Requests = (from r in Db.EmailApprovalRequests
                                    where r.RequstStatusID == (int)RequestStatus.Ignored

                                    //r.AuditAssignee == UserName &&
                                    select r.ID).Count();
                        return Requests;
                    }


                    else
                    {
                        return Requests;
                    }
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetPendingMobileRequestsCount()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    var RequestCount = Db.ClaimsApprovals.Where(p => p.ReqStatus == "PendingApproval"&&p.medicalid!=null&&p.userName!=null).Count();
                    return RequestCount;
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetAllPendingOperator()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                where r.RequstStatusID == (int)RequestStatus.NewAutoGenerated
                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetAllPendingDoctors()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                where r.RequstStatusID == (int)RequestStatus.PendingDoctorsAssign

                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetAllPendingAudit()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                where r.RequstStatusID == (int)RequestStatus.PendingAuditAssign

                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetAllAssignedOperator()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                where r.RequstStatusID == (int)RequestStatus.AssignedByOpeartor


                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetAllAssignedDoctor()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                where r.RequstStatusID == (int)RequestStatus.AssignedByDoctor
                                || r.RequstStatusID == (int)RequestStatus.PendingTechnicalApproveByDoctor
                                || r.RequstStatusID == (int)RequestStatus.EndTechnicalApproveByDoctor


                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public int GetAllAssignedAudit()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                where r.RequstStatusID == (int)RequestStatus.AssignedByAudit
                                   || r.RequstStatusID == (int)RequestStatus.PendingTechnicalApproveByAudit
                                || r.RequstStatusID == (int)RequestStatus.EndTechnicalApproveByAudit
                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        //public int ShowAllNewOnlineApprovalsCount(int Status)
        //{
        //    using (PhNetworkEntities Db = new PhNetworkEntities())
        //    {

        //       return Convert.ToInt32( Db.coun(Status));
        //            }
        //}
        public int? ShowMyOnlineApprovals(int Status,string UserName)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
              // var x = Db.SP_MyOnlineApprovals_CountRequestsByStatus(Status, UserName).FirstOrDefault();

                return Db.SP_MyOnlineApprovals_CountRequestsByStatus(Status, UserName).FirstOrDefault();
            }
        }
        public int? AllOnlieApprovalsCount()
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                return Db.OnlineApprovals_Requests.Count();
            }
        }
        public int? ShowMyAssignedOnlineApprovals( string UserName)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                // var x = Db.SP_MyOnlineApprovals_CountRequestsByStatus(Status, UserName).FirstOrDefault();

                return Db.SP_MyAssignedOnlineApprovalsReuestsCount(UserName).FirstOrDefault();
            }
        }

        public int? ShowNewOnlineApprovals(int Status)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                // var x = Db.SP_MyOnlineApprovals_CountRequestsByStatus(Status, UserName).FirstOrDefault();

                return Db.SP_OnlineApprovals_CountRequestsByStatus(Status).FirstOrDefault();
            }
        }






        public int GetAllRequestCount()
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    int Requests = 0;

                    Requests = (from r in Db.EmailApprovalRequests
                                select r.ID).Count();
                    return Requests;

                }
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public void DeleteAttach(List<int> ListOfDeleted)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    List<EmailRequestAttachmentsDetail> listofAttachement = new List<EmailRequestAttachmentsDetail>();
                    foreach (var item in ListOfDeleted)
                    {
                        EmailRequestAttachmentsDetail Attachment = (from u in Db.EmailRequestAttachmentsDetails where u.ID == item select u).SingleOrDefault();
                        Attachment.IsDeleted = true;

                        listofAttachement.Add(Attachment);


                    }
                    Db.SaveChanges();

                }
            }
            catch { }
        }

        public void DeleteNoteAttach(List<int> ListOfDeleted)
        {
            try
            {
                using (PhNetworkEntities Db = new PhNetworkEntities())
                {
                    List<NoteAttachment> listofAttachement = new List<NoteAttachment>();
                    foreach (var item in ListOfDeleted)
                    {
                        NoteAttachment Attachment = (from u in Db.NoteAttachments where u.NoteAttachmentsID == item select u).SingleOrDefault();
                        Attachment.IsDeleted = true;

                        listofAttachement.Add(Attachment);


                    }
                    Db.SaveChanges();

                }
            }
            catch { }
        }

        public void UpdateLoginAndLogOut(int UserID, int logtype, string MacAdress)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                var User = (from r in Db.CallCenterAppUsers where r.UserID == UserID select r).SingleOrDefault();
                if (logtype == (int)LogType.LogIn)
                {
                    User.IsOnline = true;
                    User.MACAddress = MacAdress;
                }
                else if (logtype == (int)LogType.LogOut)
                {
                    User.IsOnline = false;
                    User.MACAddress = "";
                }

                Db.SaveChanges();
            }
        }
        public AlertReportListvie GetRport(DateTime DateFrom, DateTime DateTo)
        {
            AlertReportListvie result;
            string from = DateFrom.ToString("yyyy-MM-dd HH:mm:ss");
            string to = DateTo.ToString("yyyy-MM-dd HH:mm:ss");


            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                 result =new AlertReportListvie {
                 OnTimeTickets=   Db.SP_GenerateAlertReport(from, to).FirstOrDefault().OnTimeTickets,
                     FirstWarningTickets = Db.SP_GenerateAlertReport(from, to).FirstOrDefault().FirstWarningTickets,
                     SecondWarningTickets = Db.SP_GenerateAlertReport(from, to).FirstOrDefault().SecondWarningTickets,
                     ThirdWarningTickets = Db.SP_GenerateAlertReport(from, to).FirstOrDefault().ThirdWarningTickets,
                       NormalTicketsViolatesTime= Db.SP_GenerateAlertReport(from, to).FirstOrDefault().NormalTicketsViolatesTime,
                        SpTicketsViolatesTime= Db.SP_GenerateAlertReport(from, to).FirstOrDefault().SpTicketsViolatesTime

                 };
                    }

            return result;
        }


            public ActivityLogsListViewModel GetActivityRportByDateRange(DateTime DateFrom, DateTime DateTo)
        {
            using (PhNetworkEntities Db = new PhNetworkEntities())
            {
                List<OperatorsActivityLogViewModel> OperatorsList = new List<OperatorsActivityLogViewModel>();
                List<OperatorsManualActivityLogViewModel> OperatorsManualList = new List<OperatorsManualActivityLogViewModel>();

                List<DoctorActivityLogViewModel> DoctorsList = new List<DoctorActivityLogViewModel>();
                List<AuditsActivityLogViewModel> AuditList = new List<AuditsActivityLogViewModel>();
                ActivityLogsListViewModel ActivityLogs = new ActivityLogsListViewModel();
                List<DoctorAuditActivityViewModel> FinalActivityForDoctor = new List<DoctorAuditActivityViewModel>();
                List<DoctorAuditActivityViewModel> FinalActivityForAudit = new List<DoctorAuditActivityViewModel>();


                var Operators = Db.SP_GetOperatorActivityReportByDateRange(DateFrom, DateTo);
                var OperatorsManaualTickets = Db.SP_GetOperatorManualActivityReportByDateRange(DateFrom, DateTo);
                foreach (var item in OperatorsManaualTickets)
                {
                    OperatorsManualActivityLogViewModel temp = new OperatorsManualActivityLogViewModel();
                    temp.CreatedBy = item.CreatedBy;
                    temp.NumberOfManualTickets = item.NumberOfManualTickets;

                    OperatorsManualList.Add(temp);
                }

                foreach (var item in Operators)
                {
                    OperatorsActivityLogViewModel temp = new OperatorsActivityLogViewModel();
                    temp.OperatorAsignee = item.OperatorAssignee;
                    temp.NumberOfTickets = item.NumberOfTickets;
                    temp.AverageTicketTime = TimeSpan.FromSeconds((double)item.AverageTicketTime).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)";
                    temp.NumberOfManualTickets = OperatorsManualList.Where(p => p.CreatedBy == item.OperatorAssignee)?.FirstOrDefault()?.NumberOfManualTickets;
                    OperatorsList.Add(temp);
                }

       

                var Doctors = Db.SP_GetDoctorActivityReportByDateRange(DateFrom, DateTo);
                foreach (var item in Doctors)
                {
                    DoctorActivityLogViewModel temp = new DoctorActivityLogViewModel();
                    temp.DoctorAsignee = item.DoctorAssignee;
                    temp.NumberOfTickets = item.NumberOfTickets;
                    temp.AverageTicketTime = item.AverageTicketTime;
                    temp.ApprovalCategoryID = item.ApprovalCategoryID;



                    DoctorsList.Add(temp);
                }
                var GrouppedByDoctorsList = DoctorsList.GroupBy(p => p.DoctorAsignee).ToList();

                foreach (var item in GrouppedByDoctorsList)
                {
                    int? TotalInpatient = item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Inpatient).Select(p => p.NumberOfTickets).SingleOrDefault();
                    int? TotalOutpatient = item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Outpatient).Select(p => p.NumberOfTickets).SingleOrDefault();
                    int? ToltalMedication = item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Medication).Select(p => p.NumberOfTickets).SingleOrDefault();

                    int? AvgInpatient = Convert.ToInt32(item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Inpatient).Select(p => p.AverageTicketTime).SingleOrDefault());
                    int? AvgOutPatient = Convert.ToInt32(item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Outpatient).Select(p => p.AverageTicketTime).SingleOrDefault());
                    int? AvgMedication = Convert.ToInt32(item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Medication).Select(p => p.AverageTicketTime).SingleOrDefault());

                    int Counter = 3;

                    if (TotalInpatient == null)
                    {
                        TotalInpatient = 0;
                        Counter -= 1;
                    }
                    if (TotalOutpatient == null)
                    {
                        TotalOutpatient = 0;
                        Counter -= 1;
                    }
                    if (ToltalMedication == null)
                    {
                        ToltalMedication = 0;
                        Counter -= 1;
                    }


                    if (AvgInpatient == null)
                    {
                        AvgInpatient = 0;

                    }
                    if (AvgOutPatient == null)
                    {
                        AvgOutPatient = 0;

                    }
                    if (AvgMedication == null)
                    {
                        AvgMedication = 0;

                    }

                    var x = item.GroupBy(p => p.ApprovalCategoryID);
                    DoctorAuditActivityViewModel temp = new DoctorAuditActivityViewModel
                    {

                        DoctorAuditName = item.Key,
                        TotalNumberOfOutPatientRequests = TotalOutpatient,
                        TotalNumberOfInpatientRequests = TotalInpatient,
                        TotalNumberOfMedicationRequests = ToltalMedication,
                        AvgOutpatientDuration = TimeSpan.FromSeconds((double)AvgOutPatient).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)",
                        AvgInpatientDuration = TimeSpan.FromSeconds((double)AvgInpatient).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)",
                        AvgMedicationDuration = TimeSpan.FromSeconds((double)AvgMedication).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)",
                        TotalNumberOfTickets = TotalInpatient + TotalOutpatient + ToltalMedication,
                        TotalAvgDuration = TimeSpan.FromSeconds(((double)AvgInpatient + (double)AvgOutPatient + (double)AvgMedication) / Counter).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)"


                    };
                    FinalActivityForDoctor.Add(temp);

                }
                var Audit = Db.SP_GetAuditActivityReportByDateRange(DateFrom, DateTo);

                foreach (var item in Audit)
                {
                    AuditsActivityLogViewModel temp = new AuditsActivityLogViewModel();
                    temp.AuditAsignee = item.AuditAssignee;
                    temp.NumberOfTickets = item.NumberOfTickets;
                    temp.AverageTicketTime = item.AverageTicketTime;
                    temp.ApprovalCategoryID = item.ApprovalCategoryID;
                    AuditList.Add(temp);
                }

                var GrouppedByAuditList = AuditList.GroupBy(p => p.AuditAsignee).ToList();

                foreach (var item in GrouppedByAuditList)
                {
                    int? TotalInpatient = item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Inpatient).Select(p => p.NumberOfTickets).SingleOrDefault();
                    int? TotalOutpatient = item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Outpatient).Select(p => p.NumberOfTickets).SingleOrDefault();
                    int? ToltalMedication = item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Medication).Select(p => p.NumberOfTickets).SingleOrDefault();

                    int? AvgInpatient = Convert.ToInt32(item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Inpatient).Select(p => p.AverageTicketTime).SingleOrDefault());
                    int? AvgOutPatient = Convert.ToInt32(item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Outpatient).Select(p => p.AverageTicketTime).SingleOrDefault());
                    int? AvgMedication = Convert.ToInt32(item.Where(p => p.ApprovalCategoryID == (int)TicketCategory.Medication).Select(p => p.AverageTicketTime).SingleOrDefault());

                    int Counter = 3;

                    if (TotalInpatient == null)
                    {
                        TotalInpatient = 0;
                        Counter -= 1;
                    }
                    if (TotalOutpatient == null)
                    {
                        TotalOutpatient = 0;
                        Counter -= 1;
                    }
                    if (ToltalMedication == null)
                    {
                        ToltalMedication = 0;
                        Counter -= 1;
                    }


                    if (AvgInpatient == null)
                    {
                        AvgInpatient = 0;

                    }
                    if (AvgOutPatient == null)
                    {
                        AvgOutPatient = 0;

                    }
                    if (AvgMedication == null)
                    {
                        AvgMedication = 0;

                    }

                    var x = item.GroupBy(p => p.ApprovalCategoryID);
                    DoctorAuditActivityViewModel temp = new DoctorAuditActivityViewModel
                    {

                        DoctorAuditName = item.Key,
                        TotalNumberOfOutPatientRequests = TotalOutpatient,
                        TotalNumberOfInpatientRequests = TotalInpatient,
                        TotalNumberOfMedicationRequests = ToltalMedication,
                        AvgOutpatientDuration = TimeSpan.FromSeconds((double)AvgOutPatient).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)",
                        AvgInpatientDuration = TimeSpan.FromSeconds((double)AvgInpatient).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)",
                        AvgMedicationDuration = TimeSpan.FromSeconds((double)AvgMedication).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)",
                        TotalNumberOfTickets = TotalInpatient + TotalOutpatient + ToltalMedication,
                        TotalAvgDuration = TimeSpan.FromSeconds(((double)AvgInpatient + (double)AvgOutPatient + (double)AvgMedication) / Counter).ToString(@"hh\:mm\:ss") + " (HH:MM:SS)"


                    };
                    FinalActivityForAudit.Add(temp);

                }

                ActivityLogs.OperatorsActivityLog = OperatorsList;
                ActivityLogs.DoctorsActivityLog = FinalActivityForDoctor;
                ActivityLogs.AuditActivityLog = FinalActivityForAudit;

                return ActivityLogs;
            }
        }

        public string GetMacAdress()
        {
            string macAddress = "";
            try
            {
                macAddress = (from nic in NetworkInterface.GetAllNetworkInterfaces() where nic.OperationalStatus == OperationalStatus.Up select nic.GetPhysicalAddress().ToString()).FirstOrDefault();
                return macAddress;
            }
            catch { }
            return macAddress;


        }


        public void ExportActivityLogExcel()
        {

        }

        //-----------------------------------------------------------------------
        public bool CheckResetPasswordUser(int userId)
        {
            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                var User = (from u in db.CallCenterAppUsers where u.UserID == userId select u).SingleOrDefault();
                if (User != null)
                {
                    if(User.Password =="prime@123")
                    {
                        return true;
                    }
                }


            }
            return false;
        }
        public bool ResetPasswordUser(int userId)
        {
            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                var User = (from u in db.CallCenterAppUsers where u.UserID == userId select u).SingleOrDefault();
                if (User != null)
                {
                    User.Password = "prime@123";
                    db.SaveChanges();
                    return true;
                }


            }
            return false;
        }
        public bool CheckDeActivateUser(int userId)
        {
            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                var User = (from u in db.CallCenterAppUsers where u.UserID == userId select u).SingleOrDefault();
                if (User != null)
                {
                  if(User.IsActive ==false)
                    {
                        return true;
                    }
                }


            }
            return false;
        }
        public bool DeActivateUser(int userId)
        {
            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                var User = (from u in db.CallCenterAppUsers where u.UserID == userId select u).SingleOrDefault();
                if (User != null)
                {
                    User.IsActive = false;
                    db.SaveChanges();
                    return true;
                }


            }
            return false;
        }
        public bool ActivateUser(int userId)
        {
            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                var User = (from u in db.CallCenterAppUsers where u.UserID == userId select u).SingleOrDefault();
                if (User != null)
                {
                    User.IsActive = true;
                    db.SaveChanges();
                    return true;
                }


            }
            return false;
        }
        //-----------------------------------------------------------------------
        public DataSet GetRequestData(int RequestID)
        {
            RequestDataSet RequestDataSetObj = new RequestDataSet();

            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                var Request = db.EmailApprovalRequests.Where(x => x.ID == RequestID).Select(x => new { x.ID ,x.PatientName, x.PriorityID, x.CreationDate, x.CompanyName, x.ProviderName, x.Medical_ID, x.ApprovalCategoryID}).FirstOrDefault();
                var RequestLogs = db.EmailApprovalLogsDetails.Where(x => x.RequestID == RequestID).ToList();
                
                if(RequestLogs.Count > 0)
                {
                    RequestDataSetObj.Request.AddRequestRow(
                    RequestID: Request.ID.ToString(),
                    CompanyName: Request.CompanyName,
                    ProviderName: Request.ProviderName,
                    MedicalID: Request.Medical_ID.ToString(),
                    CreationDate: Request.CreationDate.ToString(),
                    PatientName: Request.PatientName,
                    Category: db.EmailApprovalsCategoryDIMs.Where(x => x.ID == Request.ApprovalCategoryID).FirstOrDefault().CategoryName,
                    Priority: db.EmailApprovalsPriorityDIMs.Where(x => x.ID == Request.PriorityID).FirstOrDefault().Priority,
                    ReportCreationDate: DateTime.Now.ToString()
                );

                    foreach (var items in RequestLogs)
                    {
                        RequestDataSetObj.LogDetails.AddLogDetailsRow(
                            UserName: items.UserName,
                            OldValue: items.OldValue,
                            NewValue: items.NewValue,
                            LogType: db.EmailApprovalLogTypeDIMs.Where(x => x.ID == items.LogTypeID).FirstOrDefault().Name,
                            Comment: items.Comment,
                            CreationTime: items.LogTime.ToString()
                        );
                    }
                }                
            }
            return RequestDataSetObj;
        }

        public bool CheckIsConflictRequest(int RequestID)
         {
            List<EmailRequestMailingDetail> mailingDetails = new List<EmailRequestMailingDetail>();
            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                string generalEmail = db.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "GeneralCallCenterEmail").FirstOrDefault().ConfigurationValue;
                string specialEmail = db.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "SPCallCenterEmail").FirstOrDefault().ConfigurationValue;

                mailingDetails = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == RequestID).ToList();

                if (mailingDetails.Where(x => x.IsCallCenterEmail == true).ToList().Count >= 2)
                    return true;

                else if (mailingDetails.Where(x => x.IsCallCenterEmail == true && x.Email.ToLower().Equals(specialEmail.ToLower())).ToList().Count != 0 &&
                    (mailingDetails.Where(x => x.IsCC == true && x.Email.ToLower().Equals(generalEmail.ToLower())).ToList().Count != 0 ||
                    mailingDetails.Where(x => x.IsBCC == true && x.Email.ToLower().Equals(generalEmail.ToLower())).ToList().Count != 0))

                    return true;

                else if (mailingDetails.Where(x => x.IsCallCenterEmail == true && x.Email.ToLower().Equals(generalEmail.ToLower())).ToList().Count != 0 &&
                    (mailingDetails.Where(x => x.IsCC == true && x.Email.ToLower().Equals(specialEmail.ToLower())).ToList().Count != 0 ||
                    mailingDetails.Where(x => x.IsBCC == true && x.Email.ToLower().Equals(specialEmail.ToLower())).ToList().Count != 0))

                    return true;
            }
            return false;
        }

        public bool AddFaxRequest(EmailApprovalRequest FaxRequest)
        {
            string FaxSenderNumber;
            string AttachmentPath="";
            string AttachmentName = "";


            using (PhNetworkEntities db = new PhNetworkEntities())
            {
                FaxSenderNumber= Convert.ToString(db.EmailApprovalsConfigurations.Where(x => x.ConfigurationKey == "FaxNumber").FirstOrDefault().ConfigurationValue);
                
                if (db.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == FaxRequest.ID && x.IsDoctorAttachment == true).Count() > 0)
                {
                    AttachmentName = db.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == FaxRequest.ID && x.IsDoctorAttachment == true)
                      .FirstOrDefault().Name;
                    AttachmentPath = db.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == FaxRequest.ID && x.IsDoctorAttachment == true).FirstOrDefault().Path;
                }
                else if(db.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == FaxRequest.ID && x.IsAuditAttachment == true).Count() > 0)
                {
                    AttachmentName = db.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == FaxRequest.ID && x.IsAuditAttachment == true)
                     .FirstOrDefault().Name;
                    AttachmentPath = db.EmailRequestAttachmentsDetails.Where(x => x.TicketNumber == FaxRequest.ID && x.IsAuditAttachment == true).FirstOrDefault().Path;

                }
            }
            if (FaxRequest.FaxNumber != null)
            {
                using (FaxApprovalEntities db = new FaxApprovalEntities())
                {
                    db.FaxSenderQueues.Add(new FaxSenderQueue
                    {
                        RecevingFaxNumber = FaxRequest.FaxNumber,
                        SenderFaxNumber = FaxSenderNumber,
                        CreationDate = DateTime.Now,
                        IsActive = true,
                        IsDeleted = false,
                        EmailApprovalReqFK = FaxRequest.ID,
                        IsSent = false,
                        NumberOfTries = 0,
                        FaxSubject = FaxRequest.MailSubject,
                        AttachmentName = AttachmentName,
                        AttachmentPath = AttachmentPath,
                    });
                    db.SaveChanges();

                }
            }
                return true;
        }

        public bool AddDuplicatedTicketNumber(int RequestID,int DuplicatedTicketNumber,int UserID, out string message)
        {
            try
            {
                using (PhNetworkEntities db = new PhNetworkEntities())
                {
                    if (db.EmailApprovalRequests.Where(x => x.ID == DuplicatedTicketNumber).Count() > 0)
                    {
                        var Request1 = db.EmailApprovalRequests.Where(x => x.ID == RequestID).FirstOrDefault();
                        var Request2 = db.EmailApprovalRequests.Where(x => x.ID == DuplicatedTicketNumber).FirstOrDefault();
                        if (Request1.DuplicatedTicketNumber == null && Request2.DuplicatedTicketNumber == null)
                        {
                            Request1.DuplicatedTicketNumber = DuplicatedTicketNumber;
                            Request2.DuplicatedTicketNumber = RequestID;
                            db.SaveChanges();
                            var User = (from u in db.CallCenterAppUsers where u.UserID == UserID select u).SingleOrDefault();

                            LogEmailApprovalEvent(RequestID, (int)EmailApprovalLogTypes.ChangeStatus, UserID, User.UserName, "", "", "Request Dublicated With :" + DuplicatedTicketNumber);
                            message = "Success";

                            return true;
                        }
                        else
                        {
                            message = "Request already Set As Dublicated";

                        }
                    }
                    else
                    {
                        message = "Wrong Ticket ID";
                    }
                }
            }
            catch
            {
                message = "Error";

            }
            return false;
        }
    }
}