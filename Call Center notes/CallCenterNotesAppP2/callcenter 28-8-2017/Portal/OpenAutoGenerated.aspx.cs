using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using CallCenterNotesApp.BLL;
using CallCenterNotesApp.DLL;
using static CallCenterNotesApp.Enums.Enums;
using HttpClientSample;
using System.Web.UI.HtmlControls;

namespace CallCenterNotesApp.Portal
{
    public partial class OpenAutoGenerated : System.Web.UI.Page
    {
        int Id;
        Helpers Helper = new Helpers();
        PhNetworkEntities db = new PhNetworkEntities();

        List<string> PersonreceiveEmail = new List<string>();
        List<string> PersonIccEmail = new List<string>();
        List<string> PersonInBccEmail = new List<string>();
        static List<int> DeletedList = new List<int>();
        CallcentereMailRequest mdb = new CallcentereMailRequest();

        Helpers helper = new Helpers();

        protected void Page_Load(object sender, EventArgs e)
        {

            Id = Convert.ToInt32(Request.QueryString["Id"]);




            if (!IsPostBack)

            {
                TicketNumber.InnerText = Request.QueryString["Id"];
                SetInitialRow();
                var MailingResult = Helper.GetAllMailingDetailsByRequestID(Id);
                List<EmailRequestMailingDetail> FinalMailingToResult = new List<EmailRequestMailingDetail>();
                List<EmailRequestMailingDetail> FinalMailingCCResult = new List<EmailRequestMailingDetail>();
                List<EmailRequestMailingDetail> FinalMailingBCCResult = new List<EmailRequestMailingDetail>();

                foreach (var items in MailingResult.Where(p => p.IsTO == true))
                {
                    EmailRequestMailingDetail TempTo = new EmailRequestMailingDetail()
                    {
                        Email = items.Email
                    };

                    FinalMailingToResult.Add(TempTo);

                }




                foreach (var items in MailingResult.Where(p => p.IsCC == true))
                {
                    EmailRequestMailingDetail TempCC = new EmailRequestMailingDetail()
                    {
                        Email = items.Email
                    };
                    FinalMailingCCResult.Add(TempCC);


                }


                foreach (var items in MailingResult.Where(p => p.IsBCC == true))
                {
                    EmailRequestMailingDetail TempBCC = new EmailRequestMailingDetail()
                    {
                        Email = items.Email
                    };
                    FinalMailingBCCResult.Add(TempBCC);


                }

                if (FinalMailingToResult.Count != 0)
                {
                    AddToList.DataSource = AppendData(FinalMailingToResult, "AddToList");
                    AddToList.DataBind();
                    // AddNewRowToGrid(AddToList, "AddToList");

                }

                if (FinalMailingCCResult.Count != 0)
                {

                    AddCcList.DataSource = AppendData(FinalMailingCCResult, "AddCcList");
                    AddCcList.DataBind();
                    // AddNewRowToGrid(AddCcList, "AddCcList");

                }

                if (FinalMailingBCCResult.Count != 0)
                {

                    AddBccList.DataSource = AppendData(FinalMailingBCCResult, "AddBccList");
                    AddBccList.DataBind();
                    //  AddNewRowToGrid(AddBccList, "AddBccList");
                }


                div_Error.Visible = false;
                div_Success.Visible = false;
                // ApproveOrRejectDiv.Visible = false;
                IgnoreBtn.Visible = false;
                btn_Submit.Visible = false;
                ReplyBtn.Visible = false;
                //MailSubject.Disabled = true;
                MedicalID.Disabled = true;
                ProviderName.Disabled = true;
                Dropdownlist1.Enabled = false;
                Category.Enabled = false;
                Priority.Enabled = false;
                MemberName.Disabled = true;
                ClientName.Disabled = true;
                CallcenterOpenNote.ReadOnly = true;
                //SubjectValidator.Enabled = false;
                MedicalIDValidator.Enabled = false;
                PriorityValidation.Enabled = false;
                CategoryValidation.Enabled = false;
                RegularExpressionValidator1.Enabled = false;
                RequiredFieldValidator1.Enabled = false;
                RequiredFieldValidator2.Enabled = false;
                EmailDetailsDiv.Disabled = true;
                MailSource.Disabled = true;
                CloseBtn.Visible = false;
                FileUpload1.Visible = false;
                ApproveOrRejectDiv.Visible = true;
                InquiryAttach.Visible = false;
                FaxTicketsType.Visible = false;
                FaxTicketsType.Enabled = false;
                RequestType2.Visible = false;
                RequiredFieldValidator3.Enabled = false;
                Hide();

                //   validateFile.Enabled = false;
                CallcentereMailRequest getrequest = new CallcentereMailRequest();
                EmailApprovalRequest request = getrequest.GetEmailApprovalRequestsDetailByid(Id);
                MailSubject.Value = request.MailSubject;
                MailSource.Value = request.MailSource;

                CloseTime.Value = request.ClosedTime.ToString();

                CreationDate.Value = request.CreationDate.ToString();

                CallcenterOpenNote.Text = request.CreatedByNotes;
                ViewState.Add("CallCenterNote", request.CreatedByNotes);
                TicketAttachment.DataSource = Helper.GetAllAttachmentByRequestId(Id).Where(x => x.IsTicketAttachment == true);
                TicketAttachment.DataBind();
                string type = Request.Cookies["UserType"].Value.Trim();
                FaxLable.Visible = false;
                SaveAttached.Visible = false;

                if (request.IsFaxMail == true)
                {
                    FaxLable.Visible = true;
                    RequestType2.Visible = true;
                    EmailDetailsDiv.Visible = false;
                    FaxTicketsType.Visible = true;
                    FaxTicketsType.SelectedValue = request.TicketTypeID.ToString();
                    Dropdownlist1.SelectedItem.Text = request.DoctorAssignee;

                    RequestTypeLabel.InnerText = "Select Assigned Doctor/Audit";
                }
                if (type == "CallCenterUser" && request.IsFaxMail == true)
                {


                    FileUpload1.Enabled = true;
                    Dropdownlist1.AutoPostBack = false;
                    FaxTicketsType.Visible = true;
                    RequiredFieldValidator3.Enabled = true;
                    RequiredFieldValidator1.Enabled = true;
                    RequiredFieldValidator1.ErrorMessage = "Assigned Doctor Is Required";


                    if (request.OperatorAssignee == null && type == "CallCenterUser")
                    {
                        AssignBtn.Visible = true;
                        CloseBtn.Visible = false;
                        Dropdownlist1.SelectedItem.Text = "select Doctor";

                    }

                    else if (request.OperatorAction == null && request.OperatorAssignee == Request.Cookies["UserName"].Value.Trim() && type == "CallCenterUser" && request.RequstStatusID == (int)RequestStatus.AssignedByOpeartor)
                    {

                        AssignBtn.Visible = false;
                        SaveAttached.Visible = true;
                        MedicalIDValidator.Enabled = true;
                        PriorityValidation.Enabled = true;
                        CategoryValidation.Enabled = true;
                        Dropdownlist1.Enabled = true;
                        Dropdownlist1.Enabled = true;
                        Dropdownlist1.DataTextField = "UserName";
                        Dropdownlist1.DataValueField = "UserName";
                        FileUpload1.Visible = true;
                        Dropdownlist1.DataSource = Helper.GetAllDoctorsAndAudite().ToList();
                        Dropdownlist1.DataBind();
                        ListItem item = new ListItem();
                        item.Text = "Select Doctor/Audit";
                        item.Value = "-1";
                        Dropdownlist1.Items.Add(item);
                        Dropdownlist1.SelectedValue = "-1";
                        CloseBtn.Visible = false;
                        Priority.Enabled = true;
                        Category.Enabled = true;
                        IgnoreBtn.Visible = false;
                        MedicalID.Disabled = false;
                        ProviderName.Disabled = false;
                        MemberName.Disabled = false;
                        ClientName.Disabled = false;
                        FaxTicketsType.Enabled = true;

                    }
                    else if (request.RequstStatusID == (int)RequestStatus.SavedAsFax && request.OperatorAssignee == Request.Cookies["UserName"].Value.Trim())
                    {
                        AssignBtn.Visible = false;
                        CloseBtn.Visible = true;
                        FileUpload1.Visible = false;
                        Priority.Enabled = false;
                        Category.Enabled = false;
                        IgnoreBtn.Visible = false;
                        MedicalID.Disabled = false;
                        ProviderName.Disabled = false;
                        MemberName.Disabled = false;
                        ClientName.Value = request.CompanyName;
                        MedicalID.Value = request.Medical_ID.ToString();
                        ProviderName.Value = request.ProviderName;
                        MemberName.Value = request.PatientName;
                        var PriorityName = (TicketPriority)Enum.Parse(typeof(TicketPriority), request.PriorityID.ToString());
                        var categoryName = (TicketCategory)Enum.Parse(typeof(TicketCategory), request.ApprovalCategoryID.ToString());
                        Priority.SelectedItem.Text = PriorityName.ToString();
                        Category.SelectedItem.Text = categoryName.ToString();
                        MemberName.Value = request.PatientName;

                    }
                    else if (request.RequstStatusID == (int)RequestStatus.SavedAsFax && request.OperatorAssignee != Request.Cookies["UserName"].Value.Trim())
                    {
                        AssignBtn.Visible = false;
                        CloseBtn.Visible = false;
                        FileUpload1.Visible = false;
                        Priority.Enabled = false;
                        Category.Enabled = false;
                        IgnoreBtn.Visible = false;
                        MedicalID.Disabled = false;
                        ProviderName.Disabled = false;
                        MemberName.Disabled = false;
                        ClientName.Value = request.CompanyName;
                        MedicalID.Value = request.Medical_ID.ToString();
                        ProviderName.Value = request.ProviderName;
                        MemberName.Value = request.PatientName;
                        var PriorityName = (TicketPriority)Enum.Parse(typeof(TicketPriority), request.PriorityID.ToString());
                        var categoryName = (TicketCategory)Enum.Parse(typeof(TicketCategory), request.ApprovalCategoryID.ToString());
                        Priority.SelectedItem.Text = PriorityName.ToString();
                        Category.SelectedItem.Text = categoryName.ToString();
                        MemberName.Value = request.PatientName;

                    }











                    else if (request.RequstStatusID == (int)RequestStatus.Closed)
                    {
                        AssignBtn.Visible = false;
                        CloseBtn.Visible = true;
                        Priority.Enabled = false;
                        Category.Enabled = false;
                        IgnoreBtn.Visible = false;
                        MedicalID.Disabled = true;
                        ProviderName.Disabled = true;
                        MemberName.Disabled = true;
                        AssignBtn.Visible = false;
                        Dropdownlist1.SelectedItem.Text = request.DoctorAssignee;
                        RequestTypeLabel.InnerText = "Selected Doctor";
                        ClientName.Value = request.CompanyName;
                        MedicalID.Value = request.Medical_ID.ToString();
                        CloseBtn.Visible = false;
                        var PriorityName = (TicketPriority)Enum.Parse(typeof(TicketPriority), request.PriorityID.ToString());
                        var categoryName = (TicketCategory)Enum.Parse(typeof(TicketCategory), request.ApprovalCategoryID.ToString());
                        Priority.SelectedItem.Text = PriorityName.ToString();
                        Category.SelectedItem.Text = categoryName.ToString();
                    
                        ProviderName.Value = request.ProviderName;
                        MemberName.Value = request.PatientName;
                        FaxTicketsType.SelectedValue =request.TicketTypeID.ToString();
                        FaxTicketsType.Visible = true;

                    }
                    else
                    {
                        AssignBtn.Visible = false;
                    }



                }

                else
                {
                    if (request.OperatorAssignee == Request.Cookies["UserName"].Value.Trim() && "CallCenterUser" == type && request.RequstStatusID == (int)RequestStatus.AssignedByOpeartor)
                    {
                        AssignBtn.Visible = false;
                        if (request.OperatorAction == null)
                        { Dropdownlist1.Enabled = true; }
                    }


                    else if (request.OperatorAssignee == null && "CallCenterUser" == type)
                    {
                        AssignBtn.Visible = true;

                    }
                    else if (request.IsInquiryTicket == true &&
                        request.RequstStatusID == (int)RequestStatus.Closed)
                    {
                        AssignBtn.Visible = false;
                        ShowText();
                        header.InnerHtml = "Operator Reply";
                        RadioButtonList.Visible = false;
                        OperatorNote.Text = request.OperatorNotes;
                        OperatorNote.ReadOnly = true;
                        InquiryAttach.Visible = true;
                        InquiryAttach.DataSource = Helper.GetAllAttachmentByRequestId(Id).Where(x => x.IsOtherAttachment == true);
                        InquiryAttach.DataBind();
                    }







                    else if (request.RequstStatusID == (int)RequestStatus.RepliedOnInquiry && "CallCenterUser" == type && request.OperatorAssignee == Request.Cookies["UserName"].Value.Trim())
                    {
                        AssignBtn.Visible = false;
                        //ShowText();
                        //header.Visible=false;
                        //RadioButtonList.Visible = false;
                        CloseBtn.Visible = true;

                    }
                    else
                    {
                        ClientName.Value = request.CompanyName;
                        MedicalID.Value = request.Medical_ID.ToString();
                        ProviderName.Value = request.ProviderName;
                        MemberName.Value = request.PatientName;
                        try
                        {
                            var PriorityName = (TicketPriority)Enum.Parse(typeof(TicketPriority), request.PriorityID.ToString());
                            var categoryName = (TicketCategory)Enum.Parse(typeof(TicketCategory), request.ApprovalCategoryID.ToString());
                            Priority.SelectedItem.Text = PriorityName.ToString();
                            Category.SelectedItem.Text = categoryName.ToString();
                        }
                        catch { }
                        MemberName.Value = request.PatientName;
                        AssignBtn.Visible = false;

                    }
                }


            }

            else
            {

            }

        }
        private List<string> EmailResult(ListView listview)
        {
            List<string> result = new List<string>();
            //var list = listview.Controls[1];
            for (int i = 0; i < listview.Controls.Count; i++)
            {
                foreach (var item in listview.Controls[i].Controls)
                {
                    try
                    {

                        TextBox txt = (TextBox)item;
                        if (txt.Text != string.Empty)
                        {
                            result.Add(txt.Text);

                        }
                    }
                    catch
                    {

                    }


                }
            }

            return result;




        }


        private void SetInitialRow()
        {
            DataTable dt = new DataTable();
            DataRow dr = null;
            dt.Columns.Add(new DataColumn("ID", typeof(string)));
            dt.Columns.Add(new DataColumn("Email", typeof(string)));
            // dt.Columns.Add(new DataColumn("Column2", typeof(string)));
            //dt.Columns.Add(new DataColumn("Column3", typeof(string)));
            dr = dt.NewRow();
            dr["ID"] = "X";
            dr["Email"] = string.Empty;
            //dr["Column2"] = string.Empty;
            //  dr["Column3"] = string.Empty;
            dt.Rows.Add(dr);
            ViewState["AddToList"] = dt;
            AddToList.DataSource = dt;
            AddToList.DataBind();

            ViewState["AddCcList"] = dt;
            AddCcList.DataSource = dt;
            AddCcList.DataBind();

            ViewState["AddBccList"] = dt;

            AddBccList.DataSource = dt;
            AddBccList.DataBind();
        }


        private void AddNewRowToGrid(ListView listview, string NameOfViewState)
        {
            int rowIndex = 0;
            if (ViewState[NameOfViewState] != null)
            {
                DataTable dtCurrentTable = (DataTable)ViewState[NameOfViewState];
                DataRow drCurrentRow = null;
                if (dtCurrentTable.Rows.Count > 0)
                {
                    for (int i = 1; i <= dtCurrentTable.Rows.Count; i++)
                    {
                        if (i != 0)
                        { //extract the TextBox values 
                            Button box1 = (Button)listview.Items[rowIndex].FindControl("RowNumber");
                            TextBox box2 = (TextBox)listview.Items[rowIndex].FindControl("TextBox1");
                            box1.Text = "X";
                            drCurrentRow = dtCurrentTable.NewRow();
                            // drCurrentRow["RowNumber"] = i + 1;

                            dtCurrentTable.Rows[i - 1]["ID"] = "X";
                            dtCurrentTable.Rows[i - 1]["Email"] = box2.Text;
                            rowIndex++;
                        }
                    }
                    drCurrentRow["ID"] = "X";
                    dtCurrentTable.Rows.Add(drCurrentRow);
                    ViewState[NameOfViewState] = dtCurrentTable;

                    listview.DataSource = dtCurrentTable;
                    listview.DataBind();
                }
            }
            else
            {
                Response.Write("ViewState is null");
            }

            //Set Previous Data on Postbacks 
        }
        protected void RowNumberInBCC_Click(object sender, EventArgs e)
        {


            Button DeleteButton = sender as Button;



            int OrderNumber = Convert.ToInt32(DeleteButton.ToString());
            DeleteRowFromGrid(AddBccList, "AddBccList", OrderNumber);
        }

        protected void receiveEmail_SelectedIndexChanged(object sender, EventArgs e)
        {
            int customerId = AddToList.SelectedIndex;
        }
        protected void ADDreceiveofEmail(object sender, EventArgs e)
        {
            AddNewRowToGrid(AddToList, "AddToList");


        }

        protected void ADDInCCofEmailclick(object sender, EventArgs e)
        {
            AddNewRowToGrid(AddCcList, "AddCcList");


        }
        protected void ADDInBCCofEmailclick(object sender, EventArgs e)
        {
            AddNewRowToGrid(AddBccList, "AddBccList");


        }

        protected void InCC_SelectedIndexChanging(object sender, ListViewSelectEventArgs e)
        {
            AddCcList.SelectedIndex = e.NewSelectedIndex;

            DeleteRowFromGrid(AddCcList, "AddCcList", AddCcList.SelectedIndex);
        }
        protected void InBCC_PagePropertiesChanging(object sender, PagePropertiesChangingEventArgs e)
        {



        }
        protected void InBCC_SelectedIndexChanging(object sender, ListViewSelectEventArgs e)
        {
            AddBccList.SelectedIndex = e.NewSelectedIndex;

            DeleteRowFromGrid(AddBccList, "AddBccList", AddBccList.SelectedIndex);

        }

        protected void receiveEmail_SelectedIndexChanging(object sender, ListViewSelectEventArgs e)
        {
            AddToList.SelectedIndex = e.NewSelectedIndex;
            DeleteRowFromGrid(AddToList, "AddToList", AddToList.SelectedIndex);

        }


        private void DeleteRowFromGrid(ListView listview, string NameOfViewState, int OrderOfRemovedRow)
        {
            if (ViewState[NameOfViewState] != null && OrderOfRemovedRow != 0)
            {
                DataTable dtCurrentTable = (DataTable)ViewState[NameOfViewState];
                dtCurrentTable.Rows[OrderOfRemovedRow].Delete();


                listview.DataSource = dtCurrentTable;
                listview.DataBind();
            }
        }

        protected void Dropdownlist1_SelectedIndexChanged(object sender, EventArgs e)
        {
            CallcenterOpenNote.Text = (string)ViewState["CallCenterNote"];


            if (Dropdownlist1.SelectedItem.Text == "General" || Dropdownlist1.SelectedItem.Text == "Special")
            {
                HideGeneralOrSptail();
                //MedicalID.Disabled = false;
                //ProviderName.Disabled = false;
                //Category.Enabled = true;
                //Priority.Enabled = true;
                //Dropdownlist1.Enabled = true;
                //MemberName.Disabled = false;
                //ClientName.Disabled = false;
                //CallcenterOpenNote.ReadOnly = false;
                //FileUpload1.Enabled = true;
                //// SubjectValidator.Enabled = true;
                //MedicalIDValidator.Enabled = true;
                //RegularExpressionValidator1.Enabled = true;
                //PriorityValidation.Enabled = true;
                //CategoryValidation.Enabled = true;
                //RequiredFieldValidator1.Enabled = true;
                //RequiredFieldValidator2.Enabled = true;
                ////   validateFile.Enabled = true;
                //btn_Submit.Visible = true;
                //ApproveOrRejectDiv.Visible = false;
                //IgnoreBtn.Visible = false;
                //FileUpload1.Visible = true;
                //ReplyBtn.Visible = false;
                //   validateFile.Enabled = true;
            }
            else if (Dropdownlist1.SelectedItem.Text == "None")
            {
                MedicalID.Disabled = true;
                Category.Enabled = true;
                Priority.Enabled = true;
                ProviderName.Disabled = true;
                Dropdownlist1.Enabled = true;
                MemberName.Disabled = true;
                ClientName.Disabled = true;
                FileUpload1.Enabled = true;
                // SubjectValidator.Enabled = true;
                MedicalIDValidator.Enabled = true;
                RegularExpressionValidator1.Enabled = true;
                PriorityValidation.Enabled = true;
                CategoryValidation.Enabled = true;
                RequiredFieldValidator1.Enabled = true;
                RequiredFieldValidator2.Enabled = true;
                //   validateFile.Enabled = true;
                btn_Submit.Visible = false;
                CallcenterOpenNote.ReadOnly = true;
                IgnoreBtn.Visible = true;
                ApproveOrRejectDiv.Visible = false;
                ReplyBtn.Visible = false;
                MedicalIDValidator.Enabled = false;
                // validateFile.Enabled = false;
                EmailDetailsDiv.Disabled = false;


            }

            else if (Dropdownlist1.SelectedItem.Text == "Inquiry")
            {
                Show();

                MedicalID.Disabled = true;
                Category.Enabled = false;
                Priority.Enabled = false;
                ProviderName.Disabled = true;
                Dropdownlist1.Enabled = true;
                MemberName.Disabled = true;
                ClientName.Disabled = true;
                FileUpload1.Enabled = true;
                // SubjectValidator.Enabled = true;
                MedicalIDValidator.Enabled = true;
                RegularExpressionValidator1.Enabled = true;
                PriorityValidation.Enabled = true;
                CategoryValidation.Enabled = true;
                RequiredFieldValidator1.Enabled = true;
                RequiredFieldValidator2.Enabled = true;
                // validateFile.Enabled = true;
                btn_Submit.Visible = false;
                CallcenterOpenNote.ReadOnly = true;
                ApproveOrRejectDiv.Visible = true;
                FileUpload1.Visible = false;
                ReplyBtn.Visible = true;
                IgnoreBtn.Visible = false;
                MedicalIDValidator.Enabled = false;
                //validateFile.Enabled = false;
                EmailDetailsDiv.Disabled = false;


            }
            //            else { Response.Redirect(Request.RawUrl); }


        }
        protected void Assignclick(object sender, EventArgs e)
        {



            var Result = helper.AssignRequestToMe(Request.Cookies["UserName"].Value.Trim(), Request.Cookies["UserID"].Value.Trim(), Id);
            if (!Result)
            {
                div_Error.Visible = true;

                div_Error.InnerText = "Request Is Assigned To SomeOne else";

            }
            else
            {
                CallcentereMailRequest getrequest = new CallcentereMailRequest();
                EmailApprovalRequest request = getrequest.GetEmailApprovalRequestsDetailByid(Id);
                if (request.MailSource == "callcenter@prime-health.org")
                {

                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 1, false);
                }
                else if (request.MailSource == "sp.callcenter@prime-health.org")
                {
                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 2, false);

                }
                else
                {
                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 3, false);
                }

                Page.Response.Redirect(Page.Request.Url.ToString(), true);
            }

        }


        protected void IgnoreBtn_ServerClick(object sender, EventArgs e)
        {
            string message;
            bool valid = helper.IgnoreAndCloseEmailRequestUserName(Id, Request.Cookies["UserName"].Value.Trim(), out message);
            if (!valid)
            {
                div_Error.Visible = true;
                div_Error.InnerHtml = message;
                //CallApi auto = new CallApi();

            }
            else
            {
                CallcentereMailRequest getrequest = new CallcentereMailRequest();
                EmailApprovalRequest request = getrequest.GetEmailApprovalRequestsDetailByid(Id);

                if (request.MailSource == "callcenter@prime-health.org")
                {

                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 1, true);
                }
                else if (request.MailSource == "sp.callcenter@prime-health.org")
                {
                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 2, true);

                }
                else
                {
                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 3, true);
                }

                //div_Success.Visible = true;
                div_Success.InnerHtml = message;

                Page.Response.Redirect("UnAssignedEmailApprovals.aspx", true);

            }

        }

        protected void CloseBtn_ServerClick(object sender, EventArgs e)
        {
            helper.CloseEmailRequest(Id);
            Page.Response.Redirect("UnAssignedEmailApprovals.aspx", true);

        }



        protected void btn_Submit_ServerClick(object sender, EventArgs e)
        {
            if (CallcenterOpenNote.Text != "")
            {
                PersonreceiveEmail.AddRange(EmailResult(AddToList));
                PersonIccEmail.AddRange(EmailResult(AddCcList));
                PersonInBccEmail.AddRange(EmailResult(AddBccList));

                var ALLTo = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Id && x.IsDeleted == false
                  && x.IsTO == true).ToList();

                var ALLCC = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Id && x.IsDeleted == false
               && x.IsCC == true).ToList();


                var ALLBCC = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Id && x.IsDeleted == false
               && x.IsBCC == true).ToList();



                List<string> newpersonrecive = Helper.UpdateEmails(Id,
                    PersonreceiveEmail, Request.Cookies["UserName"].Value.Trim(), ALLTo);
                List<string> newpersonincc = Helper.UpdateEmails(Id,
                    PersonIccEmail, Request.Cookies["UserName"].Value.Trim(), ALLCC);
                List<string> newpersonibcc = Helper.UpdateEmails(Id,
                     PersonInBccEmail, Request.Cookies["UserName"].Value.Trim(), ALLBCC);



                Helper.AddEmailRequestMailingDetailsByRequestID(Id,
                    newpersonrecive, newpersonincc, newpersonibcc);









                int TicketType = 0;


                if (Dropdownlist1.SelectedItem.Text == "General")
                {
                    TicketType = (int)TicketTypes.General;


                }
                else if (Dropdownlist1.SelectedItem.Text == "Special")
                {
                    TicketType = (int)TicketTypes.Special;

                }

                string ValidationResult;


                bool valid = helper.OpenIsAutoGeneratedRequest(Id,
               Request.Cookies["UserName"].Value.Trim(), FileUpload1.PostedFile,
               FileUpload1, ProviderName.Value,
               CallcenterOpenNote.Text, TicketType
               , Category.SelectedValue, Priority.SelectedValue, Server.MapPath("~/"),
               MemberName.Value, ClientName.Value, Convert.ToInt32(MedicalID.Value), out ValidationResult);

                if (!valid)
                {
                    div_Error.Visible = true;
                    div_Error.InnerHtml = ValidationResult;
                }
                else
                {
                    div_Success.Visible = true;
                    div_Success.InnerHtml = ValidationResult;




                    CallcentereMailRequest getrequest = new CallcentereMailRequest();
                    EmailApprovalRequest request = getrequest.GetEmailApprovalRequestsDetailByid(Id);

                    //  CallApi.EmailTracking(request, false);                    //  CallApi.UpdateProductAsync(request);

                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, request.TicketTypeID, false);

                    helper.CreateBackup(FileUpload1.PostedFile, Id, Request.Cookies["UserType"].Value.Trim(), FileUpload1, false);
                    Helper.DeleteAttach(DeletedList);
                    Page.Response.Redirect("UnAssignedEmailApprovals.aspx", true);


                }
            }
            else { }


        }

        protected void ReplyBtn_ServerClick(object sender, EventArgs e)
        {
            if (OperatorNote.Text != string.Empty)
            {
                PersonreceiveEmail.AddRange(EmailResult(AddToList));
                PersonIccEmail.AddRange(EmailResult(AddCcList));
                PersonInBccEmail.AddRange(EmailResult(AddBccList));



                var ALLTo = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Id && x.IsDeleted == false
                  && x.IsTO == true).ToList();

                var ALLCC = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Id && x.IsDeleted == false
               && x.IsCC == true).ToList();


                var ALLBCC = db.EmailRequestMailingDetails.Where(x => x.TicketNumber == Id && x.IsDeleted == false
               && x.IsBCC == true).ToList();



                List<string> newpersonrecive = Helper.UpdateEmails(Id,
                    PersonreceiveEmail, Request.Cookies["UserName"].Value.Trim(), ALLTo);
                List<string> newpersonincc = Helper.UpdateEmails(Id,
                    PersonIccEmail, Request.Cookies["UserName"].Value.Trim(), ALLCC);
                List<string> newpersonibcc = Helper.UpdateEmails(Id,
                     PersonInBccEmail, Request.Cookies["UserName"].Value.Trim(), ALLBCC);



                Helper.AddEmailRequestMailingDetailsByRequestID(Id,
                    newpersonrecive, newpersonincc, newpersonibcc);

                string ValidationResult;
                bool valid = helper.ReplyOnInquiryByOperator(Id, OperatorNote.Text, Convert.ToInt32(RadioButtonList.SelectedValue), Request.Cookies["UserName"].Value.Trim(), FileUpload2.PostedFile, FileUpload2, Server.MapPath("~/"), out ValidationResult);


                if (!valid)
                {

                    div_Error.Visible = true;
                    div_Error.InnerHtml = ValidationResult;
                    ApproveOrRejectDiv.Visible = false;
                }
                else
                {
                    div_Success.Visible = true;
                    div_Success.InnerHtml = ValidationResult;
                    CallcentereMailRequest getrequest = new CallcentereMailRequest();
                    EmailApprovalRequest request = getrequest.GetEmailApprovalRequestsDetailByid(Id);
                    helper.CreateBackup(FileUpload2.PostedFile, Id, Request.Cookies["UserType"].Value.Trim(), FileUpload2, true);
                    UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, Convert.ToInt32(RadioButtonList.SelectedValue), true);
                    helper.CloseEmailRequest(Id);
                    Page.Response.Redirect("UnAssignedEmailApprovals.aspx", true);


                }
            }
            else
            {
                div_Error.InnerHtml = "Please Write a Valid Reply";
                div_Error.Visible = true;
            }

        }


        protected void LinkButton2_Click(object sender, EventArgs e)
        {
            LinkButton clickedButton = sender as LinkButton;
            var FileName = clickedButton.Attributes["FileName"].ToString();
            var FilePath = clickedButton.Attributes["Path"].ToString();

            Response.ContentType = "application/octet-stream";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + FileName.Replace(" ", string.Empty));
            Response.WriteFile(FilePath);
            Response.End();







        }

        protected void CallcenterOpenNote_TextChanged(object sender, EventArgs e)
        {

        }

        protected void CallcenterOpenNote_SaveClick(object sender, EventArgs e)
        {

        }
        public DataTable AppendData(List<EmailRequestMailingDetail> Final, string ViewStateName)
        {
            //  = (DataTable)ViewState[ViewStateName];
            DataTable dtCurrentTable = new DataTable();
            dtCurrentTable.Columns.Add("ID", typeof(System.String));
            dtCurrentTable.Columns.Add("Email", typeof(System.String));
            if (Final.Count != 0)
            {
                foreach (EmailRequestMailingDetail i in Final)
                {
                    dtCurrentTable.Rows.Add("X", i.Email);
                }
            }

            else
            {
                dtCurrentTable.Rows.Add("X", "");
            }
            ViewState[ViewStateName] = dtCurrentTable;
            return dtCurrentTable;

        }

        private void Hide()
        {

            foreach (Control item in ApproveOrRejectDiv.Controls)
            {
                try
                {


                    if (item.ID == "EmailDetailsDiv")
                    {


                        foreach (Control itm in item.Controls)

                        {
                            if (itm.ID == "UploadFileDiv")
                            {
                                itm.Visible = false;

                            }



                            if (itm.ID == "Button1")
                            {
                                itm.Visible = false;
                            }
                            if (itm.ID == "Button2")
                            {
                                itm.Visible = false;
                            }
                            if (itm.ID == "Button3")
                            {
                                itm.Visible = false;
                            }


                        }


                    }
                    else
                    {
                        item.Visible = false;
                    }
                }
                catch { }

            }
        }
        private void HideGeneralOrSptail()
        {
            MedicalID.Disabled = false;
            ProviderName.Disabled = false;
            Category.Enabled = true;
            Priority.Enabled = true;
            Dropdownlist1.Enabled = true;
            MemberName.Disabled = false;
            ClientName.Disabled = false;
            CallcenterOpenNote.ReadOnly = false;
            FileUpload1.Enabled = true;
            // SubjectValidator.Enabled = true;
            MedicalIDValidator.Enabled = true;
            RegularExpressionValidator1.Enabled = true;
            PriorityValidation.Enabled = true;
            CategoryValidation.Enabled = true;
            RequiredFieldValidator1.Enabled = true;
            RequiredFieldValidator2.Enabled = true;
            //   validateFile.Enabled = true;
            btn_Submit.Visible = true;
            IgnoreBtn.Visible = false;
            FileUpload1.Visible = true;
            ReplyBtn.Visible = false;
            // validateFile.Enabled = true;
            ApproveOrRejectDiv.Visible = true;
            header.Visible = false;









            btn_Submit.Visible = true;
            ReplyBtn.Visible = false;
            FileUpload1.Visible = true;
            foreach (Control item in ApproveOrRejectDiv.Controls)
            {

                try
                {


                    if (item.ID == "EmailDetailsDiv")
                    {


                        foreach (Control itm in item.Controls)

                        {
                            if (itm.ID == "UploadFileDiv")
                            {
                                itm.Visible = false;

                            }



                            if (itm.ID == "Button1")
                            {
                                itm.Visible = true;
                            }
                            if (itm.ID == "Button2")
                            {
                                itm.Visible = true;
                            }
                            if (itm.ID == "Button3")
                            {
                                itm.Visible = true;
                            }


                        }


                    }
                    else
                    {
                        item.Visible = false;
                    }
                }
                catch { }

            }
        }

        private void Show()
        {

            foreach (Control item in ApproveOrRejectDiv.Controls)
            {
                try
                {
                    if (item.ID == "EmailDetailsDiv")
                    {
                        foreach (Control itm in item.Controls)
                        {

                            if (itm.ID == "UploadFileDiv")
                            {
                                itm.Visible = true;

                            }

                            if (itm.ID == "Button1")
                            {
                                itm.Visible = true;
                            }
                            if (itm.ID == "Button2")
                            {
                                itm.Visible = true;
                            }
                            if (itm.ID == "Button3")
                            {
                                itm.Visible = true;
                            }


                        }


                    }
                    else
                    {
                        item.Visible = true;
                    }
                }
                catch { }

            }













        }
        private void ShowText()
        {

            foreach (Control item in ApproveOrRejectDiv.Controls)
            {
                try
                {
                    if (item.ID == "EmailDetailsDiv")
                    {
                        foreach (Control itm in item.Controls)
                        {

                            if (itm.ID == "UploadFileDiv")
                            {
                                itm.Visible = false;

                            }

                            if (itm.ID == "Button1")
                            {
                                itm.Visible = false;
                            }
                            if (itm.ID == "Button2")
                            {
                                itm.Visible = false;
                            }
                            if (itm.ID == "Button3")
                            {
                                itm.Visible = false;
                            }


                        }


                    }
                    else
                    {
                        item.Visible = true;
                    }
                }
                catch { }

            }













        }
















        protected void Save_Click(object sender, EventArgs e)
        {

        }

        protected void SaveAttached_ServerClick(object sender, EventArgs e)
        {
            if (FileUpload1.HasFile)
            {
                CallcentereMailRequest getrequest = new CallcentereMailRequest();

                EmailApprovalRequest request = getrequest.GetEmailApprovalRequestsDetailByid(Id);

                var isvalid = helper.EmailRequestFileUpload(FileUpload1.PostedFile, Id, Server.MapPath("~/"), Request.Cookies["UserType"].Value.Trim(), FileUpload1, false);

                if (isvalid)
                {
                    helper.SaveAsFaxEmail(
                        Id, Dropdownlist1.SelectedValue, ClientName.Value, MedicalID.Value, MemberName.Value, ProviderName.Value, Category.SelectedValue, 
                        Priority.SelectedValue, FaxTicketsType.SelectedValue);

                    try
                    {
                        helper.CreateBackup(FileUpload1.PostedFile, Id, Request.Cookies["UserType"].Value.Trim(), FileUpload1, false);
                        UpdateEmailAsRead.AutoGeneratedEmailTracking(request.AutoGeneratedEmailID, 3, true);
                        helper.CloseEmailRequest(Id);

                        Page.Response.Redirect("UnAssignedEmailApprovals.aspx", true);

                    }
                    catch (Exception ex)
                    {

                    }
                }
                else
                {
                    div_Error.Visible = true;
                    div_Error.InnerText = "File(s) Is Not Uploaded , Please Try Again";
                }
            }
            else
            {
                div_Error.Visible = true;
                div_Error.InnerText = "Please Upload Doctor/Audit Attachment(s)";
            }
            Page.Response.Redirect(Page.Request.Url.ToString(), true);

        }

        protected void DeleteAttachment_Click(object sender, EventArgs e)
        {
            string IsDeleted ;
            HtmlButton button = (HtmlButton)sender;
            IsDeleted = button.Attributes["isDeleted"].ToString();
            if (button.Attributes["isDeleted"] == "False")
           { string x = button.Attributes["AttachmentID"].ToString();
                DeletedList.Add(Convert.ToInt32(button.Attributes["AttachmentID"]));
                button.Attributes["isDeleted"] = "True";
                button.InnerHtml = "<span class='btn btn-success fa fa-undo'>";

            }
            else
            {
             
                DeletedList.Remove(Convert.ToInt32(button.Attributes["AttachmentID"]));
                button.Attributes["isDeleted"] = "False";
                //button.Value = "Button";
                button.InnerHtml = "<span class='btn btn-danger fa fa-times'>";

            }

        }





    } 
}
