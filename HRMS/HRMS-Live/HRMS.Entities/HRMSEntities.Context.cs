//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRMS.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HRMSEntities : DbContext
    {
        public HRMSEntities()
            : base("name=HRMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessControlUser> AccessControlUsers { get; set; }
        public virtual DbSet<ApprovalFlowDetail> ApprovalFlowDetails { get; set; }
        public virtual DbSet<ApprovalFlowRequestDetail> ApprovalFlowRequestDetails { get; set; }
        public virtual DbSet<ApprovalFlow> ApprovalFlows { get; set; }
        public virtual DbSet<ApprovalFlowUserDetail> ApprovalFlowUserDetails { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyOfficialHoliday> CompanyOfficialHolidays { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<ContractTypeDIM> ContractTypeDIMs { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DeviceOwner> DeviceOwners { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceTypeDIM> DeviceTypeDIMs { get; set; }
        public virtual DbSet<EntitlementChangedByDIM> EntitlementChangedByDIMs { get; set; }
        public virtual DbSet<FailedTransaction> FailedTransactions { get; set; }
        public virtual DbSet<GenderTypeDIM> GenderTypeDIMs { get; set; }
        public virtual DbSet<LeaveTypeAccuralPeriodDIM> LeaveTypeAccuralPeriodDIMs { get; set; }
        public virtual DbSet<LeaveTypeAccuralRule> LeaveTypeAccuralRules { get; set; }
        public virtual DbSet<LeaveTypeCarryOverRule> LeaveTypeCarryOverRules { get; set; }
        public virtual DbSet<LeaveTypeConsiderationAsDIM> LeaveTypeConsiderationAsDIMs { get; set; }
        public virtual DbSet<LeaveTypeDurationUnitDIM> LeaveTypeDurationUnitDIMs { get; set; }
        public virtual DbSet<LeaveTypeEntitlementSourceDIM> LeaveTypeEntitlementSourceDIMs { get; set; }
        public virtual DbSet<LeaveTypeEntitlementTypeDIM> LeaveTypeEntitlementTypeDIMs { get; set; }
        public virtual DbSet<LeaveTypeField> LeaveTypeFields { get; set; }
        public virtual DbSet<LeaveTypeFieldsDIM> LeaveTypeFieldsDIMs { get; set; }
        public virtual DbSet<LeaveTypeFieldsVisibilityDIM> LeaveTypeFieldsVisibilityDIMs { get; set; }
        public virtual DbSet<LeaveTypeFirstAccuralMethodDIM> LeaveTypeFirstAccuralMethodDIMs { get; set; }
        public virtual DbSet<LeaveTypeGainingEligibilityMethodDIM> LeaveTypeGainingEligibilityMethodDIMs { get; set; }
        public virtual DbSet<LeaveTypeMinOneDayDurationDIM> LeaveTypeMinOneDayDurationDIMs { get; set; }
        public virtual DbSet<LeaveTypeMonthlyAaccuralDaysDIM> LeaveTypeMonthlyAaccuralDaysDIMs { get; set; }
        public virtual DbSet<LeaveTypePartialDuration> LeaveTypePartialDurations { get; set; }
        public virtual DbSet<LeaveTypePartialDurationUnitDIM> LeaveTypePartialDurationUnitDIMs { get; set; }
        public virtual DbSet<LeaveTypeProrateCalculationModeDIM> LeaveTypeProrateCalculationModeDIMs { get; set; }
        public virtual DbSet<LeaveTypeProrateMethodDIM> LeaveTypeProrateMethodDIMs { get; set; }
        public virtual DbSet<LeaveTypeRestrictedContractType> LeaveTypeRestrictedContractTypes { get; set; }
        public virtual DbSet<LeaveTypeRestrictedDep> LeaveTypeRestrictedDeps { get; set; }
        public virtual DbSet<LeaveTypeRestrictedEmployee> LeaveTypeRestrictedEmployees { get; set; }
        public virtual DbSet<LeaveTypeRestrictedGender> LeaveTypeRestrictedGenders { get; set; }
        public virtual DbSet<LeaveTypeRestrictedSubDep> LeaveTypeRestrictedSubDeps { get; set; }
        public virtual DbSet<LeaveTypeRestriction> LeaveTypeRestrictions { get; set; }
        public virtual DbSet<LeaveTypeRestrictionTypeDIM> LeaveTypeRestrictionTypeDIMs { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<LogsDetail> LogsDetails { get; set; }
        public virtual DbSet<LogTypeDIM> LogTypeDIMs { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<MonthlyEffectiveAccuredLeaveType> MonthlyEffectiveAccuredLeaveTypes { get; set; }
        public virtual DbSet<OfficialHoliday> OfficialHolidays { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<RequestActionDIM> RequestActionDIMs { get; set; }
        public virtual DbSet<RequestAttachment> RequestAttachments { get; set; }
        public virtual DbSet<RequestDetail> RequestDetails { get; set; }
        public virtual DbSet<RequestDetailsTypesDIM> RequestDetailsTypesDIMs { get; set; }
        public virtual DbSet<RequestHandler> RequestHandlers { get; set; }
        public virtual DbSet<RequestHistory> RequestHistories { get; set; }
        public virtual DbSet<RequestHoursHandler> RequestHoursHandlers { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<RequestStatu> RequestStatus { get; set; }
        public virtual DbSet<ServiceLogTypeDIM> ServiceLogTypeDIMs { get; set; }
        public virtual DbSet<ServicesLog> ServicesLogs { get; set; }
        public virtual DbSet<SubDepartment> SubDepartments { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimeAttendance> TimeAttendances { get; set; }
        public virtual DbSet<UserEntitlementChange> UserEntitlementChanges { get; set; }
        public virtual DbSet<UserEntitlement> UserEntitlements { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WeekDaysDIM> WeekDaysDIMs { get; set; }
        public virtual DbSet<WorkingWeek> WorkingWeeks { get; set; }
        public virtual DbSet<WorkingWeekDetail> WorkingWeekDetails { get; set; }
        public virtual DbSet<ServicesDIM> ServicesDIMs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Sp_PrintLeaveTypeRequest_Result> Sp_PrintLeaveTypeRequest(Nullable<int> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PrintLeaveTypeRequest_Result>("Sp_PrintLeaveTypeRequest", requestIDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
